
# Directory: src\app

# Directory: src\app\fonts

===== File: src\app\layout.tsx =====
import '../styles/global.css';

interface RootLayoutProps {
  children: React.ReactNode;
}

export default async function RootLayout({ children }: RootLayoutProps) {
  return children;
}


===== File: src\app\not-found.tsx =====
import Button from "@/components/Button";
import Link from "next/link";
import React from "react";

export default function NotFound() {
  return (
    <html className="flex items-center justify-center h-screen bg-background-whitebg">
      <body className="flex flex-col items-center justify-center text-center p-4 md:p-6">
        <h1 className="text-title font-extrabold text-text-blackPrimary mb-4">
          404
        </h1>
        <p className="text-h4 text-text-blackSecondary mb-6">
          Oops! The page you&apos;re looking for doesn&apos;t exist.
        </p>
        <Link href="/">
          <Button variant="primary">Go Back to Home</Button>
        </Link>
      </body>
    </html>
  );
}


# Directory: src\app\[locale]

# Directory: src\app\[locale]\blog

===== File: src\app\[locale]\blog\page.tsx =====
import { Link } from '@/i18n/routing';
import Button from '../../../components//UI/botton';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '../../../components/UI/card';

const blogPosts = [
  {
    id: '1',
    title: "The Complete Guide to Classic Men's Haircuts",
    excerpt:
      'Explore timeless hairstyles that never go out of fashion, from the pompadour to the side part.',
    author: 'Marcus Johnson',
    date: '2024-03-15',
    readTime: '5 min read',
    category: 'Styling Tips',
    image: '/blog-1.jpg',
  },
  {
    id: '2',
    title: "Beard Care Essentials: A Beginner's Guide",
    excerpt:
      'Everything you need to know about maintaining a healthy, well-groomed beard at home.',
    author: 'James Wilson',
    date: '2024-03-10',
    readTime: '4 min read',
    category: 'Grooming',
    image: '/blog-2.jpg',
  },
  {
    id: '3',
    title: 'The Art of the Hot Towel Shave',
    excerpt:
      'Discover the history and technique behind the traditional barbershop hot towel shave.',
    author: 'David Rodriguez',
    date: '2024-03-05',
    readTime: '6 min read',
    category: 'Traditional Techniques',
    image: '/blog-3.jpg',
  },
  {
    id: '4',
    title: 'Modern Fading Techniques Explained',
    excerpt:
      'Learn about different fade types and how they can enhance your overall appearance.',
    author: 'Marcus Johnson',
    date: '2024-02-28',
    readTime: '7 min read',
    category: 'Styling Tips',
    image: '/blog-4.jpg',
  },
  {
    id: '5',
    title: 'Choosing the Right Products for Your Hair Type',
    excerpt:
      'A comprehensive guide to selecting the best styling products for your specific hair needs.',
    author: 'David Rodriguez',
    date: '2024-02-20',
    readTime: '5 min read',
    category: 'Product Guide',
    image: '/blog-5.jpg',
  },
  {
    id: '6',
    title: "Barbershop Etiquette: Do's and Don'ts",
    excerpt:
      'Make the most of your barbershop experience with these essential etiquette tips.',
    author: 'James Wilson',
    date: '2024-02-15',
    readTime: '3 min read',
    category: 'Tips',
    image: '/blog-6.jpg',
  },
];

const categories = [
  'All',
  'Styling Tips',
  'Grooming',
  'Traditional Techniques',
  'Product Guide',
  'Tips',
];

export default function BlogPage() {
  return (
    <div className='py-24 sm:py-32'>
      <div className='mx-auto max-w-7xl px-6 lg:px-8'>
        <div className='mx-auto max-w-2xl text-center'>
          <h1 className='text-4xl font-bold tracking-tight text-slate-900 sm:text-5xl'>
            Barbering Blog
          </h1>
          <p className='mt-6 text-lg leading-8 text-slate-600'>
            Expert tips, techniques, and insights from our master barbers
          </p>
        </div>

        {/* Categories filter */}
        <div className='flex justify-center flex-wrap gap-2 mt-12'>
          {categories.map(category => (
            <button
              key={category}
              className='px-4 py-2 rounded-full text-sm font-medium bg-slate-100 text-slate-600 hover:bg-amber-100 hover:text-amber-600 transition-colors'
            >
              {category}
            </button>
          ))}
        </div>

        {/* Featured post */}
        <div className='mt-16'>
          <Card className='lg:flex lg:items-center lg:space-x-8 hover:shadow-lg transition-shadow'>
            <div className='lg:w-1/2'>
              <div className='aspect-video bg-slate-300 rounded-lg'></div>
            </div>
            <div className='lg:w-1/2 mt-6 lg:mt-0'>
              <CardHeader>
                <div className='flex items-center gap-2 mb-2'>
                  <span className='px-2 py-1 bg-amber-100 text-amber-800 rounded-full text-xs font-medium'>
                    Featured
                  </span>
                  <span className='text-sm text-slate-500'>
                    {blogPosts[0].category}
                  </span>
                </div>
                <CardTitle className='text-2xl'>{blogPosts[0].title}</CardTitle>
                <p className='text-slate-600'>{blogPosts[0].excerpt}</p>
              </CardHeader>
              <CardContent>
                <div className='flex items-center justify-between text-sm text-slate-500 mb-4'>
                  <span>By {blogPosts[0].author}</span>
                  <span>{blogPosts[0].readTime}</span>
                </div>
                <Link href={`/blog/${blogPosts[0].id}`}>
                  <Button variant='outline'>Read More</Button>
                </Link>
              </CardContent>
            </div>
          </Card>
        </div>

        {/* Blog posts grid */}
        <div className='mt-16 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8'>
          {blogPosts.slice(1).map(post => (
            <Card key={post.id} className='hover:shadow-lg transition-shadow'>
              <div className='aspect-video bg-slate-300 rounded-t-lg'></div>
              <CardHeader>
                <div className='flex items-center justify-between text-sm text-slate-500 mb-2'>
                  <span className='px-2 py-1 bg-slate-100 rounded-full text-xs'>
                    {post.category}
                  </span>
                  <span>{post.readTime}</span>
                </div>
                <CardTitle className='text-lg hover:text-amber-600 transition-colors'>
                  <Link href={`/blog/${post.id}`}>{post.title}</Link>
                </CardTitle>
                <p className='text-slate-600 text-sm'>{post.excerpt}</p>
              </CardHeader>
              <CardContent>
                <div className='flex items-center justify-between text-sm text-slate-500'>
                  <span>By {post.author}</span>
                  <span>{new Date(post.date).toLocaleDateString()}</span>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Newsletter signup */}
        <div className='mt-20'>
          <Card className='bg-slate-900 text-white'>
            <CardContent className='text-center p-12'>
              <h2 className='text-2xl font-bold mb-4'>Stay Updated</h2>
              <p className='text-slate-300 mb-6'>
                Get the latest barbering tips and trends delivered to your inbox
              </p>
              <div className='flex max-w-md mx-auto gap-4'>
                <input
                  type='email'
                  placeholder='Enter your email'
                  className='flex-1 px-4 py-2 rounded-lg text-slate-900 focus:outline-none focus:ring-2 focus:ring-amber-600'
                />
                <Button
                  variant='primary'
                  className='bg-amber-600 hover:bg-amber-700'
                >
                  Subscribe
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}


# Directory: src\app\[locale]\booking

===== File: src\app\[locale]\booking\page.tsx =====
/* eslint-disable @typescript-eslint/no-unused-vars */
'use client';

import Button from '@/components/Button';
import { formatPrice } from '@/lib/utils';
import { useTranslations } from 'next-intl';
import { useState } from 'react';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '../../../components/UI/card';

export default function BookingPage() {
  const t = useTranslations('BookingPage');
  const steps = t.raw('steps');
  const services = t.raw('services');
  const barbers = t.raw('barbers');
  const timeSlots = t.raw('timeSlots');

  const [step, setStep] = useState(1);
  const [selectedService, setSelectedService] = useState('');
  const [selectedBarber, setSelectedBarber] = useState('');
  const [selectedDate, setSelectedDate] = useState('');
  const [selectedTime, setSelectedTime] = useState('');
  const [customerInfo, setCustomerInfo] = useState({
    name: '',
    email: '',
    phone: '',
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    alert(t('alerts.confirmation'));
    setStep(1);
    setSelectedService('');
    setSelectedBarber('');
    setSelectedDate('');
    setSelectedTime('');
    setCustomerInfo({ name: '', email: '', phone: '' });
  };

  const selectedServiceData = services.find(
    (s: unknown) => s.id === selectedService
  );
  const selectedBarberData = barbers.find(
    (b: unknown) => b.id === selectedBarber
  );

  return (
    <div className='py-24 sm:py-32 min-h-screen bg-background-white'>
      <div className='mx-auto max-w-4xl px-6 lg:px-8'>
        <div className='text-center mb-12'>
          <h1 className='text-4xl font-bold text-text-blackPrimary'>
            {t('hero.title')}
          </h1>
          <p className='mt-4 text-lg text-text-blackSecondary'>
            {t('hero.description')}
          </p>
        </div>

        <Card className='shadow-lg'>
          <CardHeader>
            <div className='flex justify-between items-center'>
              <CardTitle className='text-xl'>Step {step} of 4</CardTitle>
              <div className='flex space-x-2'>
                {[1, 2, 3, 4].map(i => (
                  <div
                    key={i}
                    className={`w-3 h-3 rounded-full transition-colors ${
                      i <= step ? 'bg-primary-500' : 'bg-secondary-200'
                    }`}
                  />
                ))}
              </div>
            </div>
          </CardHeader>
          <CardContent className='p-8'>
            {step === 1 && (
              <div>
                <h3 className='text-2xl font-semibold mb-8 text-text-blackPrimary'>
                  {steps.service.title}
                </h3>
                <div className='grid gap-4'>
                  {services.map((service: any) => (
                    <div
                      key={service.id}
                      className={`p-6 border-2 rounded-xl cursor-pointer transition-all hover:shadow-md ${
                        selectedService === service.id
                          ? 'border-primary-500 bg-primary-50'
                          : 'border-secondary-200 hover:border-primary-300'
                      }`}
                      onClick={() => setSelectedService(service.id)}
                    >
                      <div className='flex justify-between items-center'>
                        <div>
                          <h4 className='font-semibold text-lg text-text-blackPrimary'>
                            {service.name}
                          </h4>
                          <p className='text-sm text-text-blackSecondary'>
                            {service.duration} minutes
                          </p>
                        </div>
                        <span className='font-bold text-primary-500 text-xl'>
                          {formatPrice(service.price)}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
                <div className='mt-8'>
                  <Button
                    variant='primary'
                    fullWidth
                    disabled={!selectedService}
                    onClick={() => setStep(2)}
                  >
                    {steps.service.nextButton}
                  </Button>
                </div>
              </div>
            )}

            {/* Step 2, Step 3, Step 4 will follow same pattern, pulling all text from JSON */}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


# Directory: src\app\[locale]\city

===== File: src\app\[locale]\city\page.tsx =====
"use client";
import { AccessibilityIcon } from "../../../../public/assets/icons/AccessibilityIcon";
import { ArrowRightLongIcon } from "../../../../public/assets/icons/ArrowRightLongIcon";
import Button from "@/components/Button";
import GarageLocation from "@/sections/GarageLocation";
import Help from "@/sections/Help";
import Hero from "@/sections/Hero";
import VehicleSafety from "@/sections/VehicleSafety";
import { useTranslations } from "next-intl";
import Link from "next/link";
import { usePathname } from "next/navigation";
import React from "react";

export default function City() {
  const tHero = useTranslations("CityPage.Hero");
  const tHelp = useTranslations("CityPage.Help");
  const pathname = usePathname();

  const currentLocale = pathname.split("/")[1] || "id";

  return (
    <>
      <Hero
        title={tHero("title")}
        description={tHero("description")}
        backgroundClass="bg-hero-city-pattern"
      >
        <div className="flex flex-col md:flex-row gap-3 mt-11">
          <Link href={`/${currentLocale}/download`}>
            <Button
              variant="primary"
              icon={<ArrowRightLongIcon />}
              iconPosition="right"
            >
              {tHero("downloadButton")}
            </Button>
          </Link>
        </div>
        <Button
          variant="secondary"
          icon={<AccessibilityIcon />}
          className="px-[10px]"
        ></Button>
      </Hero>
      <GarageLocation />
      <VehicleSafety />
      <Help
        title={tHelp("title")}
        description={tHelp("description")}
        backgroundClass="bg-city-pattern"
      >
        <Button
          variant="primary"
          icon={<ArrowRightLongIcon />}
          iconPosition="right"
        >
          {tHelp("bringBeamButton")}
        </Button>
      </Help>
    </>
  );
}


# Directory: src\app\[locale]\contact

===== File: src\app\[locale]\contact\page.tsx =====
'use client';

import Button from '@/components/Button';
import NewsCard from '@/components/NewsCard';
import { useTranslations } from 'next-intl';
import { useState } from 'react';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '../../../components/UI/card';
import image1 from '/public/assets/images/contact-1.jpg';
import image2 from '/public/assets/images/contact-2.jpg';
import image3 from '/public/assets/images/contact-3.jpg';

export default function ContactPage() {
  const t = useTranslations('ContactPage');
  const highlights = t.raw('Highlights'); // get array from JSON

  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    subject: '',
    message: '',
  });

  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    alert("Message sent! We'll get back to you soon.");
    setFormData({ name: '', email: '', phone: '', subject: '', message: '' });
  };

  return (
    <div className='py-24 sm:py-32'>
      <div className='mx-auto max-w-7xl px-6 lg:px-8'>
        {/* Hero */}
        <div className='mx-auto max-w-2xl text-center'>
          <h1 className='text-4xl font-bold text-text-blackPrimary sm:text-5xl'>
            {t('Hero.title')}
          </h1>
          <p className='mt-6 text-lg leading-8 text-text-blackSecondary'>
            {t('Hero.description')}
          </p>
        </div>

        {/* Highlights */}
        <div className='mt-16 grid grid-cols-1 gap-8 md:grid-cols-3'>
          {[image1, image2, image3].map((img, i) => (
            <NewsCard
              key={i}
              imageSrc={img}
              imageAlt={highlights[i].imageAlt}
              category={highlights[i].category}
              description={highlights[i].description}
              date={highlights[i].date}
            />
          ))}
        </div>

        {/* Contact Form + Info */}
        <div className='mt-16 grid gap-12 lg:grid-cols-2'>
          {/* Form */}
          <Card className='shadow-xl rounded-2xl border border-secondary-200'>
            <CardHeader>
              <CardTitle className='text-2xl'>{t('Form.title')}</CardTitle>
              <p className='text-text-blackSecondary'>{t('Form.subtitle')}</p>
            </CardHeader>
            <CardContent className='p-8'>
              <form onSubmit={handleSubmit} className='space-y-6'>
                {/* Full Name + Phone */}
                <div className='grid gap-4 sm:grid-cols-2'>
                  <div>
                    <label className='block text-sm mb-2'>
                      {t('Form.fields.name')}
                    </label>
                    <input
                      type='text'
                      name='name'
                      required
                      value={formData.name}
                      onChange={handleChange}
                      className='w-full rounded-xl border-2 border-secondary-200 p-4'
                    />
                  </div>
                  <div>
                    <label className='block text-sm mb-2'>
                      {t('Form.fields.phone')}
                    </label>
                    <input
                      type='tel'
                      name='phone'
                      value={formData.phone}
                      onChange={handleChange}
                      className='w-full rounded-xl border-2 border-secondary-200 p-4'
                    />
                  </div>
                </div>

                {/* Email */}
                <div>
                  <label className='block text-sm mb-2'>
                    {t('Form.fields.email')}
                  </label>
                  <input
                    type='email'
                    name='email'
                    required
                    value={formData.email}
                    onChange={handleChange}
                    className='w-full rounded-xl border-2 border-secondary-200 p-4'
                  />
                </div>

                {/* Subject */}
                <div>
                  <label className='block text-sm mb-2'>
                    {t('Form.fields.subject')}
                  </label>
                  <select
                    name='subject'
                    required
                    value={formData.subject}
                    onChange={handleChange}
                    className='w-full rounded-xl border-2 border-secondary-200 p-4'
                  >
                    <option value=''>{t('Form.selectOptions.default')}</option>
                    {Object.entries(t.raw('Form.selectOptions')).map(
                      ([key, value]) =>
                        key === 'default' ? null : (
                          <option key={key} value={key}>
                            {value}
                          </option>
                        )
                    )}
                  </select>
                </div>

                {/* Message */}
                <div>
                  <label className='block text-sm mb-2'>
                    {t('Form.fields.message')}
                  </label>
                  <textarea
                    name='message'
                    rows={4}
                    required
                    value={formData.message}
                    onChange={handleChange}
                    className='w-full rounded-xl border-2 border-secondary-200 p-4'
                  />
                </div>

                <Button variant='primary' type='submit' className='w-full'>
                  {t('Form.button')}
                </Button>
              </form>
            </CardContent>
          </Card>

          {/* Info Section */}
          <div className='space-y-8'>
            <Card className='shadow-xl rounded-2xl border border-secondary-200'>
              <CardHeader>
                <CardTitle className='text-2xl'>
                  {t('Info.visitTitle')}
                </CardTitle>
              </CardHeader>
              <CardContent className='space-y-8 p-8'>
                {/* Address */}
                <div>
                  <h3 className='font-semibold'>{t('Info.address.title')}</h3>
                  {t
                    .raw('Info.address.lines')
                    .map((line: string, i: number) => (
                      <p key={i}>{line}</p>
                    ))}
                </div>
                {/* Email */}
                <div>
                  <h3 className='font-semibold'>{t('Info.email.title')}</h3>
                  {t.raw('Info.email.lines').map((line: string, i: number) => (
                    <p key={i}>{line}</p>
                  ))}
                </div>
                {/* Phone */}
                <div>
                  <h3 className='font-semibold'>{t('Info.phone.title')}</h3>
                  {t.raw('Info.phone.lines').map((line: string, i: number) => (
                    <p key={i}>{line}</p>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}


# Directory: src\app\[locale]\download

===== File: src\app\[locale]\download\page.tsx =====
import { AccessibilityIcon } from "../../../../public/assets/icons/AccessibilityIcon";
import Button from "@/components/Button";
import Hero from "@/sections/Hero";
import QrCode from "@/sections/QrCode";
import { useTranslations } from "next-intl";
import React from "react";

export default function Download() {
  const t = useTranslations("DownloadPage");
  return (
    <>
      <Hero
        title={t("title")}
        description={t("description")}
        backgroundClass="bg-hero-download-pattern"
      >
        <>
          <div className="flex flex-col md:flex-row gap-3 mt-11">
            <Button variant="primary">{t("iosButton")}</Button>
            <Button variant="primary">{t("androidButton")}</Button>
          </div>
          <Button
            variant="secondary"
            icon={<AccessibilityIcon />}
            className="px-[10px]"
          ></Button>
        </>
      </Hero>
      <QrCode />
    </>
  );
}


===== File: src\app\[locale]\layout.tsx =====
import { routing } from '@/i18n/routing';
import Footer from '@/sections/Footer';
import Navbar from '@/sections/Navbar';
import type { Metadata } from 'next';
import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';
import { notFound } from 'next/navigation';
import { GenderProvider } from '../../context/GenderContext';
import '../../styles/global.css';

export const metadata: Metadata = {
  title: 'DeepCut',
  description: 'DeepCut - Modern Design Website Landing Page',
};

type Locale = 'en' | 'fr' | 'id' | 'de' | 'ar' | 'russ';

interface RootLayoutProps {
  children: React.ReactNode;
  params: Promise<{ locale: Locale }>; // ✅ make params async
}

export default async function RootLayout({
  children,
  params,
}: RootLayoutProps) {
  const { locale } = await params; // ✅ await before destructuring

  if (!routing.locales.includes(locale)) {
    notFound();
  }

  const messages = await getMessages();

  return (
    <html lang={locale}>
      <body className='relative font-sans bg-background-whitebg antialiased'>
        <GenderProvider>
          <NextIntlClientProvider messages={messages}>
            <Navbar />
            {children}
            <Footer />
          </NextIntlClientProvider>
        </GenderProvider>
      </body>
    </html>
  );
}


===== File: src\app\[locale]\page.tsx =====
'use client';

import Button from '@/components/Button';
import { useGender } from '@/context/GenderContext';
import Feature from '@/sections/Feature';
import Help from '@/sections/Help';
import Hero from '@/sections/Hero';
import Mission from '@/sections/Mission';
import News from '@/sections/News';
import Partnership from '@/sections/Partnership';
import Priority from '@/sections/Priority';
import Vehicle from '@/sections/Vehicle';
import { useTranslations } from 'next-intl';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useState } from 'react';
import { AccessibilityIcon } from '../../../public/assets/icons/AccessibilityIcon';
import { ArrowRightLongIcon } from '../../../public/assets/icons/ArrowRightLongIcon';
import { MapPinIcon } from '../../../public/assets/icons/MapPinIcon';
import { PhoneWhiteIcon } from '../../../public/assets/icons/PhoneWhiteIcon';

export default function Home() {
  const { setGender } = useGender(); // context
  const [showOverlay, setShowOverlay] = useState(true); // always true on load

  const tHero = useTranslations('HomePage.Hero');
  const tFeature = useTranslations('HomePage.Feature');
  const tHelp = useTranslations('HomePage.Help');
  const pathname = usePathname();
  const currentLocale = pathname.split('/')[1] || 'id';

  const handleChoice = (choice: 'male' | 'female' | 'other') => {
    setGender(choice); // only in memory
    setShowOverlay(false); // close overlay
  };

  return (
    <>
      {/* Overlay */}
      {showOverlay && (
        <div className='fixed inset-0 z-50 flex'>
          <button
            onClick={() => handleChoice('male')}
            className='flex-1 bg-blue-500 text-white text-2xl font-bold flex items-center justify-center hover:opacity-90 transition'
          >
            Male
          </button>
          <button
            onClick={() => handleChoice('female')}
            className='flex-1 bg-pink-500 text-white text-2xl font-bold flex items-center justify-center hover:opacity-90 transition'
          >
            Female
          </button>
          <button
            onClick={() => handleChoice('other')}
            className='flex-1 bg-gray-500 text-white text-2xl font-bold flex items-center justify-center hover:opacity-90 transition'
          >
            Prefer not to say
          </button>
        </div>
      )}

      {/* Main content */}
      <div
        className={showOverlay ? 'blur-md pointer-events-none select-none' : ''}
      >
        <Hero
          title={tHero('title')}
          description={tHero('description')}
          backgroundClass='bg-hero-pattern'
        >
          <>
            <div className='flex flex-col md:flex-row gap-3 mt-11'>
              <Button variant='secondary' icon={<MapPinIcon />}>
                {tHero('buttons.viewGarage')}
              </Button>
              <Link href={`/${currentLocale}/download`}>
                <Button
                  variant='primary'
                  icon={<ArrowRightLongIcon />}
                  iconPosition='right'
                >
                  {tHero('buttons.downloadApp')}
                </Button>
              </Link>
            </div>
            <Button
              variant='secondary'
              icon={<AccessibilityIcon />}
              className='px-[10px]'
            />
          </>
        </Hero>
        <Mission />
        <Priority />
        <Vehicle />
        <Feature
          tag={tFeature('tag')}
          title={tFeature('title')}
          description={tFeature('description')}
          button={tFeature('button')}
        />
        <News />
        <Partnership />
        <Help
          title={tHelp('title')}
          description={tHelp('description')}
          backgroundClass='bg-help-pattern'
        >
          <Button
            variant='primary'
            icon={<PhoneWhiteIcon />}
            iconPosition='right'
          >
            {tHelp('button')}
          </Button>
        </Help>
      </div>
    </>
  );
}


# Directory: src\app\[locale]\partner

===== File: src\app\[locale]\partner\page.tsx =====
/* eslint-disable @typescript-eslint/no-explicit-any */
'use client';

import Button from '@/components/UI/botton';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/UI/card';
import { Link } from '@/i18n/routing';
import { useTranslations } from 'next-intl';
import { usePathname } from 'next/navigation';

export default function PartnersPage() {
  const tHero = useTranslations('PartnerPage.hero');
  const tBenefits = useTranslations('PartnerPage.benefits');
  const tTypes = useTranslations('PartnerPage.types');
  const tCta = useTranslations('PartnerPage.cta');

  const pathname = usePathname();
  const currentLocale = pathname.split('/')[1] || 'en';

  const benefits = tBenefits.raw('items') as Array<any>;
  const types = tTypes.raw('items') as Array<any>;

  return (
    <div className='min-h-screen'>
      {/* Hero Section */}
      <section className='relative bg-gradient-to-br from-slate-900 via-slate-800 to-amber-900 py-24 sm:py-32'>
        <div className='absolute inset-0 bg-black/20'></div>
        <div className='relative mx-auto max-w-7xl px-6 lg:px-8'>
          <div className='mx-auto max-w-2xl text-center'>
            <h1 className='text-4xl font-bold tracking-tight text-white sm:text-6xl'>
              {tHero('title')}
            </h1>
            <p className='mt-6 text-lg leading-8 text-slate-300'>
              {tHero('description')}
            </p>
            <div className='mt-10 flex items-center justify-center gap-x-6'>
              <Button
                variant='primary'
                size='lg'
                className='bg-amber-600 hover:bg-amber-700'
              >
                {tHero('buttons.becomePartner')}
              </Button>
              <Link href={`/${currentLocale}/contact`}>
                <Button
                  variant='outline'
                  size='lg'
                  className='text-white border-white hover:bg-white hover:text-slate-900'
                >
                  {tHero('buttons.getInTouch')}
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </section>

      {/* Benefits Section */}
      <section className='py-24 sm:py-32 bg-white'>
        <div className='mx-auto max-w-7xl px-6 lg:px-8'>
          <div className='mx-auto max-w-2xl text-center'>
            <h2 className='text-3xl font-bold tracking-tight text-slate-900 sm:text-4xl'>
              {tBenefits('title')}
            </h2>
            <p className='mt-4 text-lg leading-8 text-slate-600'>
              {tBenefits('description')}
            </p>
          </div>
          <div className='mx-auto mt-16 grid max-w-2xl grid-cols-1 gap-8 sm:mt-20 lg:mx-0 lg:max-w-none lg:grid-cols-2 xl:grid-cols-4'>
            {benefits.map((benefit, index) => (
              <Card
                key={index}
                className='text-center hover:shadow-lg transition-shadow'
              >
                <CardHeader>
                  <div className='mx-auto w-16 h-16 bg-amber-100 rounded-full flex items-center justify-center text-2xl mb-4'>
                    {benefit.icon}
                  </div>
                  <CardTitle className='text-xl'>{benefit.title}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className='text-slate-600'>{benefit.description}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* Partnership Types */}
      <section className='py-24 sm:py-32 bg-slate-50'>
        <div className='mx-auto max-w-7xl px-6 lg:px-8'>
          <div className='mx-auto max-w-2xl text-center'>
            <h2 className='text-3xl font-bold tracking-tight text-slate-900 sm:text-4xl'>
              {tTypes('title')}
            </h2>
            <p className='mt-4 text-lg leading-8 text-slate-600'>
              {tTypes('description')}
            </p>
          </div>
          <div className='mx-auto mt-16 grid max-w-2xl grid-cols-1 gap-8 sm:mt-20 lg:mx-0 lg:max-w-none lg:grid-cols-3'>
            {types.map((type, index) => (
              <Card
                key={index}
                className='flex flex-col justify-between hover:shadow-xl transition-all duration-300'
              >
                <div>
                  <CardHeader>
                    <CardTitle className='text-xl'>{type.title}</CardTitle>
                    <p className='text-slate-600'>{type.description}</p>
                  </CardHeader>
                  <CardContent>
                    <ul className='space-y-2'>
                      {type.features.map(
                        (feature: string, featureIndex: number) => (
                          <li
                            key={featureIndex}
                            className='flex items-center text-sm text-slate-600'
                          >
                            <div className='w-2 h-2 bg-amber-600 rounded-full mr-3'></div>
                            {feature}
                          </li>
                        )
                      )}
                    </ul>
                  </CardContent>
                </div>
                <div className='p-6 pt-0'>
                  <Button variant='outline' className='w-full'>
                    {type.cta}
                  </Button>
                </div>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className='py-24 sm:py-32 bg-amber-600'>
        <div className='mx-auto max-w-7xl px-6 lg:px-8'>
          <div className='mx-auto max-w-2xl text-center'>
            <h2 className='text-3xl font-bold tracking-tight text-white sm:text-4xl'>
              {tCta('title')}
            </h2>
            <p className='mt-6 text-lg leading-8 text-amber-100'>
              {tCta('description')}
            </p>
            <div className='mt-10 flex items-center justify-center gap-x-6'>
              <Button
                variant='secondary'
                size='lg'
                className='bg-white text-amber-600 hover:bg-slate-100'
              >
                {tCta('buttons.applyNow')}
              </Button>
              <Button
                variant='ghost'
                size='lg'
                className='text-white hover:bg-amber-700'
              >
                {tCta('buttons.downloadKit')}
              </Button>
            </div>
          </div>
        </div>
      </section>
    </div>
  );
}


# Directory: src\app\[locale]\pricing

===== File: src\app\[locale]\pricing\page.tsx =====
/* eslint-disable @typescript-eslint/no-explicit-any */
'use client';

import Button from '@/components/Button';
import NewsCard from '@/components/NewsCard';
import { formatPrice } from '@/lib/utils';
import { useMessages, useTranslations } from 'next-intl';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '../../../components/UI/card';
import image1 from '/public/assets/images/pricing-1.jpg';
import image2 from '/public/assets/images/pricing-2.jpg';
import image3 from '/public/assets/images/pricing-3.jpg';

const highlightImages = [image1, image2, image3];

// Type definitions
interface Offer {
  title: string;
  description: string;
  button: string;
}

interface ServiceItem {
  name: string;
  price: number;
  description: string;
}

interface ServiceCategory {
  category: string;
  items: ServiceItem[];
}

interface Highlight {
  imageAlt: string;
  category: string;
  description: string;
  date: string;
}

interface PricingPageMessages {
  Hero: {
    title: string;
    description: string;
  };
  Highlights: Highlight[];
  Services: ServiceCategory[];
  SpecialOffers: {
    title: string;
    offers: Offer[];
  };
}

export default function PricingPage() {
  const tHero = useTranslations('PricingPage.Hero');
  const tOffers = useTranslations('PricingPage.SpecialOffers');

  // Type-safe access to messages
  const messagesTyped = useMessages() as unknown as {
    PricingPage: PricingPageMessages;
  };

  const highlights = messagesTyped.PricingPage.Highlights;
  const services = messagesTyped.PricingPage.Services;
  const offers = messagesTyped.PricingPage.SpecialOffers.offers;

  return (
    <div className='py-24 sm:py-32'>
      <div className='mx-auto max-w-7xl px-6 lg:px-8'>
        {/* Hero */}
        <div className='mx-auto max-w-2xl text-center'>
          <h1 className='text-4xl font-bold tracking-tight text-slate-900 sm:text-5xl'>
            {tHero('title')}
          </h1>
          <p className='mt-6 text-lg leading-8 text-slate-600'>
            {tHero('description')}
          </p>
        </div>

        {/* Highlights */}
        <div className='mt-16 grid grid-cols-1 md:grid-cols-3 gap-8'>
          {highlights.map((h: Highlight, index: number) => (
            <NewsCard
              key={index}
              imageSrc={highlightImages[index]}
              imageAlt={h.imageAlt}
              category={h.category}
              description={h.description}
              date={h.date}
            />
          ))}
        </div>

        {/* Services */}
        <div className='mt-20 space-y-12'>
          {services.map((category: ServiceCategory, i: number) => (
            <div key={i}>
              <h2 className='text-2xl font-bold text-slate-900 mb-6'>
                {category.category}
              </h2>
              <div className='grid md:grid-cols-2 lg:grid-cols-3 gap-6'>
                {category.items.map((service: ServiceItem, j: number) => (
                  <Card key={j} className='hover:shadow-lg transition-shadow'>
                    <CardContent className='p-6'>
                      <div className='flex justify-between items-start mb-4'>
                        <h3 className='font-semibold text-lg'>
                          {service.name}
                        </h3>
                        <span className='text-2xl font-bold text-primary-500'>
                          {formatPrice(service.price)}
                        </span>
                      </div>
                      <p className='text-slate-600 mb-6'>
                        {service.description}
                      </p>
                      <Button variant='primary' fullWidth navigateTo='/booking'>
                        Book Now
                      </Button>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          ))}
        </div>

        {/* Special Offers */}
        <div className='mt-20'>
          <Card className='bg-primary-50 border-primary-200'>
            <CardHeader>
              <CardTitle className='text-center text-2xl text-primary-700'>
                {tOffers('title')}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className='grid md:grid-cols-3 gap-6 text-center'>
                {offers.map((offer: Offer, i: number) => (
                  <div key={i} className='p-4'>
                    <h3 className='font-semibold text-primary-700 mb-2'>
                      {offer.title}
                    </h3>
                    <p className='text-primary-600 mb-4'>{offer.description}</p>
                    <Button variant='secondary' size='sm'>
                      {offer.button}
                    </Button>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}


# Directory: src\app\[locale]\shop

===== File: src\app\[locale]\shop\page.tsx =====
/* eslint-disable @typescript-eslint/no-explicit-any */
'use client';

import Button from '@/components/UI/botton';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/UI/card';
import { cn, formatPrice } from '@/lib/utils';
import { useTranslations } from 'next-intl';
import { useState } from 'react';

export default function ShopPage() {
  const t = useTranslations('ShopPage');

  const categories = t.raw('categories'); // returns array
  const products = t.raw('products'); // returns array

  const [selectedCategory, setSelectedCategory] = useState('All');
  const [cart, setCart] = useState<string[]>([]);

  const filteredProducts =
    selectedCategory === 'All'
      ? products
      : products.filter((p: any) => p.category === selectedCategory);

  const addToCart = (productId: string) => {
    setCart([...cart, productId]);
  };

  return (
    <div className='py-24 sm:py-32'>
      <div className='mx-auto max-w-7xl px-6 lg:px-8'>
        {/* Hero */}
        <div className='mx-auto max-w-2xl text-center'>
          <h1 className='text-4xl font-bold tracking-tight text-slate-900 sm:text-5xl'>
            {t('hero.title')}
          </h1>
          <p className='mt-6 text-lg leading-8 text-slate-600'>
            {t('hero.description')}
          </p>
        </div>

        {/* Categories */}
        <div className='flex justify-center flex-wrap gap-2 mt-12'>
          {categories.map((category: string) => (
            <button
              key={category}
              onClick={() => setSelectedCategory(category)}
              className={cn(
                'px-4 py-2 rounded-full text-sm font-medium transition-colors',
                selectedCategory === category
                  ? 'bg-amber-600 text-white'
                  : 'bg-slate-100 text-slate-600 hover:bg-slate-200'
              )}
            >
              {category}
            </button>
          ))}
        </div>

        {/* Products */}
        <div className='mt-16 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8'>
          {filteredProducts.map((product: any) => (
            <Card
              key={product.id}
              className='hover:shadow-lg transition-shadow'
            >
              <div className='relative'>
                <div className='aspect-square bg-slate-300 rounded-t-lg'></div>
                {product.originalPrice && (
                  <span className='absolute top-2 left-2 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-medium'>
                    Save {formatPrice(product.originalPrice - product.price)}
                  </span>
                )}
                {!product.inStock && (
                  <div className='absolute inset-0 bg-black/50 rounded-t-lg flex items-center justify-center'>
                    <span className='text-white font-semibold'>
                      {t('buttons.outOfStock')}
                    </span>
                  </div>
                )}
              </div>
              <CardHeader>
                <div className='flex justify-between items-start'>
                  <CardTitle className='text-lg'>{product.name}</CardTitle>
                  <div className='text-right'>
                    <span className='text-xl font-bold text-amber-600'>
                      {formatPrice(product.price)}
                    </span>
                    {product.originalPrice && (
                      <span className='block text-sm text-slate-500 line-through'>
                        {formatPrice(product.originalPrice)}
                      </span>
                    )}
                  </div>
                </div>
                <p className='text-slate-600 text-sm'>{product.description}</p>
                <div className='flex items-center gap-2'>
                  <div className='flex text-yellow-400'>
                    {'★'.repeat(Math.floor(product.rating))}
                  </div>
                  <span className='text-sm text-slate-500'>
                    {product.rating} ({product.reviews} reviews)
                  </span>
                </div>
              </CardHeader>
              <CardContent>
                <Button
                  variant={product.inStock ? 'primary' : 'outline'}
                  disabled={!product.inStock}
                  className='w-full'
                  onClick={() => product.inStock && addToCart(product.id)}
                >
                  {product.inStock
                    ? t('buttons.addToCart')
                    : t('buttons.outOfStock')}
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Cart */}
        {cart.length > 0 && (
          <div className='mt-12 max-w-md mx-auto'>
            <Card className='bg-amber-50 border-amber-200'>
              <CardHeader>
                <CardTitle className='text-center text-amber-800'>
                  {t('cart.title')} ({cart.length} items)
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className='flex justify-between items-center'>
                  <span className='font-semibold'>
                    {t('cart.total')}: {formatPrice(cart.length * 25)}
                  </span>
                  <Button
                    variant='primary'
                    className='bg-amber-600 hover:bg-amber-700'
                  >
                    {t('buttons.checkout')}
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        {/* Featured */}
        <div className='mt-20'>
          <Card className='bg-slate-900 text-white'>
            <CardContent className='text-center p-12'>
              <h2 className='text-2xl font-bold mb-4'>{t('featured.title')}</h2>
              <p className='text-slate-300 mb-6 max-w-2xl mx-auto'>
                {t('featured.description')}
              </p>
              <div className='grid md:grid-cols-3 gap-6 text-sm'>
                {t.raw('featured.benefits').map((benefit: any, idx: number) => (
                  <div key={idx}>
                    <div className='text-2xl mb-2'>{benefit.icon}</div>
                    <h3 className='font-semibold mb-1'>{benefit.title}</h3>
                    <p className='text-slate-400'>{benefit.desc}</p>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}


# Directory: src\components

===== File: src\components\Button.tsx =====
'use client';
import { cva } from 'class-variance-authority';
import { useRouter } from 'next/navigation';
import React, { ButtonHTMLAttributes, ReactNode } from 'react';

// ✅ Minimal helper to merge class names
function cn(...classes: (string | undefined | null | false)[]) {
  return classes.filter(Boolean).join(' ');
}

const buttonVariants = cva(
  'inline-flex items-center justify-center gap-2 font-medium rounded-xl transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none select-none',
  {
    variants: {
      variant: {
        primary:
          'bg-primary-500 text-white shadow-sm hover:bg-primary-600 active:scale-[0.98] focus-visible:ring-primary-500',
        secondary:
          'bg-secondary-100 text-gray-900 hover:bg-secondary-200 active:scale-[0.98] focus-visible:ring-secondary-500',
        tertiary:
          'bg-tertiary-700 text-white hover:bg-tertiary-800 active:scale-[0.98] focus-visible:ring-tertiary-500',
        ghost:
          'bg-transparent text-gray-700 hover:bg-gray-100 active:scale-[0.98] focus-visible:ring-gray-300',
      },
      size: {
        sm: 'h-9 px-3 text-sm',
        md: 'h-11 px-5 text-sm',
        lg: 'h-12 px-6 text-base',
      },
      fullWidth: {
        true: 'w-full',
      },
    },
    defaultVariants: {
      variant: 'primary',
      size: 'md',
      fullWidth: false,
    },
  }
);

export default function Button(
  props: {
    variant?: 'primary' | 'secondary' | 'tertiary' | 'ghost';
    size?: 'sm' | 'md' | 'lg';
    fullWidth?: boolean;
    icon?: ReactNode;
    iconPosition?: 'left' | 'right';
    navigateTo?: string;
  } & ButtonHTMLAttributes<HTMLButtonElement>
) {
  const {
    variant,
    className,
    size,
    fullWidth,
    icon,
    children,
    iconPosition = 'left',
    navigateTo,
    onClick,
    ...otherProps
  } = props;

  const router = useRouter();

  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    if (navigateTo) {
      router.push(navigateTo);
    }
    if (onClick) {
      onClick(event);
    }
  };

  return (
    <button
      className={cn(buttonVariants({ variant, size, fullWidth }), className)}
      onClick={handleClick}
      {...otherProps}
    >
      {icon && iconPosition === 'left' && <span className='mr-1'>{icon}</span>}
      {children}
      {icon && iconPosition === 'right' && <span className='ml-1'>{icon}</span>}
    </button>
  );
}


===== File: src\components\ChangeLanguage.tsx =====
'use client';

import * as Select from '@radix-ui/react-select';
import { Check, ChevronDown } from 'lucide-react';
import { useLocale } from 'next-intl';
import Image from 'next/image';
import { usePathname, useRouter } from 'next/navigation';
import * as React from 'react';

interface Country {
  code: string;
  flag: string;
  value: string;
}

const countries: Country[] = [
  { code: 'ID', value: 'id', flag: '/flags/id.svg' },
  { code: 'EN', value: 'en', flag: '/flags/en.svg' },
  { code: 'FR', value: 'fr', flag: '/flags/fr.svg' },
  { code: 'DE', value: 'de', flag: '/flags/de.svg' },
  { code: 'RU', value: 'russ', flag: '/flags/russ.svg' },
  { code: 'AR', value: 'ar', flag: '/flags/ar.svg' },
];

export default function ChangeLanguage() {
  const router = useRouter();
  const pathname = usePathname();
  const localActive = useLocale();

  const [selected, setSelected] = React.useState<string>(
    countries.find(c => c.value === localActive)?.value || countries[0].value
  );

  const handleChange = (value: string) => {
    setSelected(value);
    const newPath = pathname.replace(/^\/[a-z]{2}/, `/${value}`);
    router.replace(newPath);
  };

  const activeCountry = countries.find(c => c.value === selected)!;

  return (
    <Select.Root value={selected} onValueChange={handleChange}>
      <Select.Trigger
        className='relative inline-flex items-center gap-2 bg-gradient-to-r from-slate-900/80 to-slate-800/80 backdrop-blur-md px-5 py-2 rounded-xl border border-white/10 shadow-sm hover:shadow-md transition focus:outline-none focus:ring-2 focus:ring-indigo-500'
        aria-label='Language'
      >
        <Image
          src={activeCountry.flag}
          alt={activeCountry.code}
          width={20}
          height={16}
          className='w-5 h-4 rounded-sm object-cover'
        />
        <Select.Value>
          <span className='text-white text-sm font-medium'>
            {activeCountry.code}
          </span>
        </Select.Value>
        <Select.Icon>
          <ChevronDown className='h-4 w-4 text-slate-400' />
        </Select.Icon>
      </Select.Trigger>

      <Select.Portal>
        <Select.Content
          sideOffset={6}
          position='popper' // ensures it overlays, no layout shift
          className='absolute z-50 min-w-[120px] rounded-lg shadow-xl border border-slate-800 bg-slate-900 text-white animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95'
        >
          <Select.Viewport className='p-1'>
            {countries.map(country => (
              <Select.Item
                key={country.code}
                value={country.value}
                className='relative flex items-center gap-2 px-3 py-2 rounded-md text-sm cursor-pointer select-none hover:bg-slate-800 focus:bg-slate-800 focus:outline-none'
              >
                <Image
                  src={country.flag}
                  alt={country.code}
                  width={18}
                  height={14}
                  className='w-4 h-3 rounded-sm'
                />
                <Select.ItemText>{country.code}</Select.ItemText>
                <Select.ItemIndicator className='absolute right-2'>
                  <Check className='h-4 w-4 text-indigo-400' />
                </Select.ItemIndicator>
              </Select.Item>
            ))}
          </Select.Viewport>
        </Select.Content>
      </Select.Portal>
    </Select.Root>
  );
}


===== File: src\components\CityGrid.tsx =====
interface CityGridProps {
  cities: string[];
}

const CityGrid = ({ cities }: CityGridProps) => {
  return (
    <div className="grid grid-cols-2 lg:grid-cols-4 items-center mt-3 gap-y-2">
      {cities.map((city, index) => (
        <p
          key={index}
          className="text-text-blackSecondary text-body2 whitespace-nowrap"
        >
          {city}
        </p>
      ))}
    </div>
  );
};

export default CityGrid;


===== File: src\components\CountryList.tsx =====
import CityGrid from "./CityGrid";

type Country = {
  country: string;
  cities: string[];
};

type CountryListProps = {
  countries: Country[];
};

const CountryList = ({ countries }: CountryListProps) => {
  return (
    <div className="flex flex-col gap-16">
      {countries.map((country, index) => (
        <div key={index} className="flex flex-col">
          <h4 className="text-h4 text-text-blackPrimary font-medium">
            {country.country}
          </h4>
          <CityGrid cities={country.cities} />
        </div>
      ))}
    </div>
  );
};

export default CountryList;


===== File: src\components\DashedBorderContainer.tsx =====
import { ReactNode } from "react";
import Image from "next/image";
import bulletIcon from "../../public/assets/images/bullet-icon.svg";
import { twMerge } from "tailwind-merge";

interface DashedBorderContainerProps {
  children: ReactNode;
  showTop?: boolean;
  showBottom?: boolean;
  showLeft?: boolean;
  showRight?: boolean;
  className?: string;
}

export default function DashedBorderContainer({
  children,
  showTop = true,
  showBottom = true,
  showLeft = true,
  showRight = true,
  className,
}: DashedBorderContainerProps) {
  return (
    <div
      className={twMerge(
        `relative ${
          showTop ? "border-t border-others-santasGray border-dashed" : ""
        } ${
          showBottom ? "border-b border-others-santasGray border-dashed" : ""
        }`
      )}
    >
      <div
        className={twMerge(
          "relative container max-w-xs md:max-w-[44rem] lg:max-w-6xl py-16",
          showLeft && "border-l border-others-santasGray border-dashed",
          showRight && "border-r border-others-santasGray border-dashed",
          className
        )}
      >
        {/* Bullet Icons */}
        {showTop && showLeft && (
          <div className="absolute z-10 -top-1 -left-1">
            <Image
              src={bulletIcon}
              alt="Bullet icon"
              className="size-2"
              draggable="false"
            />
          </div>
        )}
        {showTop && showRight && (
          <div className="absolute z-10 -top-1 -right-1">
            <Image
              src={bulletIcon}
              alt="Bullet icon"
              className="size-2"
              draggable="false"
            />
          </div>
        )}
        {showBottom && showLeft && (
          <div className="absolute z-10 -bottom-1 -left-1">
            <Image
              src={bulletIcon}
              alt="Bullet icon"
              className="size-2"
              draggable="false"
            />
          </div>
        )}
        {showBottom && showRight && (
          <div className="absolute z-10 -bottom-1 -right-1">
            <Image
              src={bulletIcon}
              alt="Bullet icon"
              className="size-2"
              draggable="false"
            />
          </div>
        )}
        {children}
      </div>
    </div>
  );
}


===== File: src\components\NewsCard.tsx =====
import Image, { StaticImageData } from "next/image";

interface NewsCardProps {
  imageSrc: string | StaticImageData;
  imageAlt: string;
  category: string;
  description: string;
  date: string;
}

export default function NewsCard({
  imageSrc,
  imageAlt,
  category,
  description,
  date,
}: NewsCardProps) {
  return (
    <div className="flex flex-col items-center">
      <div>
        <Image
          src={imageSrc}
          alt={imageAlt}
          className="w-full object-cover rounded-2xl"
          width={1000}
          height={1000}
        />
      </div>
      <div className="mt-3">
        <h4 className="text-kategori font-medium text-text-purple2">
          {category}
        </h4>
        <p className="mt-2 text-text-blackPrimary text-sm w-[90%]">
          {description}
        </p>
        <div className="mt-1 flex gap-2 items-center">
          <span>
            <svg
              width="16"
              height="16"
              viewBox="0 0 16 16"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M8 4V8H11M14 8C14 8.78793 13.8448 9.56815 13.5433 10.2961C13.2417 11.0241 12.7998 11.6855 12.2426 12.2426C11.6855 12.7998 11.0241 13.2417 10.2961 13.5433C9.56815 13.8448 8.78793 14 8 14C7.21207 14 6.43185 13.8448 5.7039 13.5433C4.97595 13.2417 4.31451 12.7998 3.75736 12.2426C3.20021 11.6855 2.75825 11.0241 2.45672 10.2961C2.15519 9.56815 2 8.78793 2 8C2 6.4087 2.63214 4.88258 3.75736 3.75736C4.88258 2.63214 6.4087 2 8 2C9.5913 2 11.1174 2.63214 12.2426 3.75736C13.3679 4.88258 14 6.4087 14 8Z"
                stroke="#808080"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
          </span>
          <span className="text-body3 text-text-blackSecondary">{date}</span>
        </div>
      </div>
    </div>
  );
}


===== File: src\components\PartnershipCard.tsx =====
import Image, { StaticImageData } from "next/image";
import React from "react";
import Button from "./Button";

interface PartnershipCardProps {
  title: string;
  subtitle: string;
  imageSrc: string | StaticImageData;
  imageAlt: string;
  iconSrc: string;
  buttonIcon: React.ReactNode;
}

export default function PartnershipCard({
  title,
  subtitle,
  imageSrc,
  imageAlt,
  iconSrc,
  buttonIcon,
}: PartnershipCardProps) {
  return (
    <div className="relative overflow-hidden w-full md:max-w-[564px] bg-gradientTertiary hover:bg-gradientTertiaryHover transition-all duration-300 ease-in-out rounded-[1.75rem] flex flex-shrink-0">
      <div className="flex flex-col w-full gap-6 p-5 md:p-10">
        {/* Header Section */}
        <div className="flex items-start gap-3">
          <Image
            src={iconSrc}
            alt="Icon"
            className="mt-2 w-6 h-6"
            width={24}
            height={24}
          />
          <div>
            <h4 className="text-h5 md:text-h4 text-text-blackPrimary font-medium">
              <span className="text-text-purple1">{title.split(",")[0]}</span>
              {title.split(",")[1] && ` ${title.split(",")[1].trim()}`}
            </h4>
            <p className="text-body3 text-text-blackSecondary mt-2">
              {subtitle}
            </p>
          </div>
        </div>

        {/* Content Section */}
        <div className="relative flex items-end justify-between mt-6">
          {/* Image */}
          <Image
            src={imageSrc}
            alt={imageAlt}
            className="w-[150px] md:w-[350px] h-auto rounded-t-xl -mb-5 md:-mb-10"
          />
          {/* Button */}
          <div>
            <Button variant="tertiary">{buttonIcon}</Button>
          </div>
        </div>
      </div>
    </div>
  );
}


===== File: src\components\Tag.tsx =====
import React, { HTMLAttributes } from "react";

export default function Tag(props: HTMLAttributes<HTMLDivElement>) {
  const { children } = props;
  return (
    <div className="inline-flex w-fit border bg-secondary-50 border-secondary-300 rounded-[10px] gap-2 text-text-purple1 px-2.5 py-2 items-center">
      <span className="text-sm">{children}</span>
    </div>
  );
}


# Directory: src\components\UI

===== File: src\components\UI\botton.tsx =====
import { cn } from '@/lib/utils';
import { cva, type VariantProps } from 'class-variance-authority';
import { ButtonHTMLAttributes, forwardRef } from 'react';

const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-lg font-medium transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        primary:
          'bg-amber-600 text-white hover:bg-amber-700 focus-visible:ring-amber-600',
        secondary:
          'bg-slate-900 text-white hover:bg-slate-800 focus-visible:ring-slate-900',
        outline:
          'border-2 border-amber-600 text-amber-600 hover:bg-amber-600 hover:text-white',
        ghost: 'text-slate-900 hover:bg-slate-100',
      },
      size: {
        sm: 'h-9 px-3 text-sm',
        default: 'h-11 px-6',
        lg: 'h-12 px-8 text-lg',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'primary',
      size: 'default',
    },
  }
);

interface ButtonProps
  extends ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  children: React.ReactNode;
  icon?: React.ReactNode;
  iconPosition?: 'left' | 'right';
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  (
    {
      className,
      variant,
      size,
      children,
      icon,
      iconPosition = 'left',
      ...props
    },
    ref
  ) => {
    return (
      <button
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      >
        {icon && iconPosition === 'left' && (
          <span className='mr-2'>{icon}</span>
        )}
        {children}
        {icon && iconPosition === 'right' && (
          <span className='ml-2'>{icon}</span>
        )}
      </button>
    );
  }
);
Button.displayName = 'Button';

export default Button;


===== File: src\components\UI\card.tsx =====
import { cn } from '@/lib/utils';
import { HTMLAttributes, forwardRef } from 'react';

const Card = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      className={cn('rounded-xl border bg-white p-6 shadow-sm', className)}
      {...props}
    />
  )
);
Card.displayName = 'Card';

const CardHeader = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      className={cn('flex flex-col space-y-1.5 pb-4', className)}
      {...props}
    />
  )
);
CardHeader.displayName = 'CardHeader';

const CardTitle = forwardRef<
  HTMLParagraphElement,
  HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      'font-semibold text-xl leading-none tracking-tight',
      className
    )}
    {...props}
  />
));
CardTitle.displayName = 'CardTitle';

const CardContent = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn('pt-0', className)} {...props} />
  )
);
CardContent.displayName = 'CardContent';

export { Card, CardContent, CardHeader, CardTitle };


===== File: src\components\VehicleCard.tsx =====
"use client";

import React from "react";
import Button from "./Button";
import Image, { StaticImageData } from "next/image";
import ArrowRightWhiteIcon from "../../public/assets/icons/ArrowRightWhiteIcon";

interface VehicleCardProps {
  imageSrc: string | StaticImageData;
  title: string;
}

export default function VehicleCard({ imageSrc, title }: VehicleCardProps) {
  return (
    <div className="bg-gradientPrimary hover:bg-gradientPrimaryHover transition-all duration-300 ease-in-out rounded-3xl">
      <div className="flex flex-col px-6 md:px-10 pb-6 md:pb-10 pt-6">
        <div className="flex items-center justify-center">
          <Image
            src={imageSrc}
            alt={`${title} image`}
            className="w-[254px] h-auto"
            width={254}
            height={254}
            priority
          />
        </div>
        <div className="flex items-center justify-between mt-7">
          <h4 className="text-h5 md:text-h4 font-medium text-text-blackPrimary">
            {title}
          </h4>
          <Button
            variant="tertiary"
            icon={<ArrowRightWhiteIcon />}
            aria-label={`View details of ${title}`}
          />
        </div>
      </div>
    </div>
  );
}


===== File: src\components\VehicleSafetyCard.tsx =====
import React from "react";
import Tag from "./Tag";
import Image, { StaticImageData } from "next/image";

type VehicleSafetyCardProps = {
  tag: string;
  title: string;
  description: string;
  imageSrc: StaticImageData;
  imageAlt: string;
  textPosition?: "left" | "right";
  imagePosition?: "left" | "right";
};

export default function VehicleSafetyCard({
  tag,
  title,
  description,
  imageSrc,
  imageAlt,
  textPosition = "left",
  imagePosition = "right",
}: VehicleSafetyCardProps) {
  const isTextLeft = textPosition === "left";
  const isImageLeft = imagePosition === "left";
  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 items-center gap-8">
      {/* Konten Teks */}
      <div
        className={`flex flex-col ${
          isTextLeft ? "order-1 lg:order-1" : "order-1 lg:order-2"
        }`}
      >
        <div>
          <Tag>{tag}</Tag>
        </div>
        <div>
          <h3 className="mt-8 text-h3 text-text-blackPrimary font-medium">
            {title}
          </h3>
          <p className="mt-3 text-text-blackSecondary text-body1">
            {description}
          </p>
        </div>
      </div>

      {/* Konten Gambar */}
      <div
        className={`flex justify-end ${
          isImageLeft ? "mr-auto order-2 md:order-1" : "order-2 md:order-2"
        }`}
      >
        <div className="flex items-center justify-center bg-gradientPrimary rounded-3xl w-full md:w-[33rem] md:h-[25rem] p-6 md:p-16">
          <Image
            src={imageSrc}
            alt={imageAlt}
            className="w-full md:w-[24rem] h-auto"
          />
        </div>
      </div>
    </div>
  );
}


# Directory: src\context

===== File: src\context\GenderContext.tsx =====
'use client';

import React, { createContext, useContext, useEffect, useState } from 'react';

type Gender = 'male' | 'female' | 'other';

interface GenderContextType {
  gender: Gender;
  setGender: (gender: Gender) => void;
}

const GenderContext = createContext<GenderContextType | undefined>(undefined);

export const GenderProvider = ({ children }: { children: React.ReactNode }) => {
  const [gender, setGender] = useState<Gender>('other');

  useEffect(() => {
    const saved = localStorage.getItem('genderChoice') as Gender | null;
    if (saved) setGender(saved);
  }, []);

  const handleSetGender = (g: Gender) => {
    setGender(g);
    localStorage.setItem('genderChoice', g);
  };

  return (
    <GenderContext.Provider value={{ gender, setGender: handleSetGender }}>
      <div className={`gender-${gender} min-h-screen`}>{children}</div>
    </GenderContext.Provider>
  );
};

export const useGender = () => {
  const ctx = useContext(GenderContext);
  if (!ctx) throw new Error('useGender must be used inside GenderProvider');
  return ctx;
};


# Directory: src\i18n

===== File: src\i18n\request.ts =====
import { getRequestConfig } from 'next-intl/server';
import { routing } from './routing';

// Tentukan tipe Locale
type Locale = 'en' | 'fr' | 'id' | 'de' | 'ar' | 'russ'; // Sesuaikan dengan routing.locales

export default getRequestConfig(async ({ requestLocale }) => {
  // Menunggu hasil requestLocale yang bisa berupa string atau undefined
  let locale: string | undefined = await requestLocale;

  // Pastikan locale valid dan termasuk dalam routing.locales
  if (locale && routing.locales.includes(locale as Locale)) {
    // locale sudah valid, tidak perlu perubahan
  } else {
    // Jika locale tidak valid atau undefined, setel nilai default
    locale = routing.defaultLocale;
  }

  return {
    locale,
    messages: (await import(`../../messages/${locale}.json`)).default,
  };
});


===== File: src\i18n\routing.ts =====
import { createNavigation } from 'next-intl/navigation';
import { defineRouting } from 'next-intl/routing';

export const routing = defineRouting({
  // A list of all locales that are supported
  locales: ['id', 'en', 'fr', 'de', 'ar', 'russ'],

  // Used when no locale matches
  defaultLocale: 'de',
});

// Lightweight wrappers around Next.js' navigation APIs
// that will consider the routing configuration
export const { Link, redirect, usePathname, useRouter, getPathname } =
  createNavigation(routing);


# Directory: src\lib

===== File: src\lib\utils.ts =====
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export const formatPrice = (price: number, locale: string = 'en') => {
  const currency = locale === 'fr' ? 'EUR' : 'USD';
  return new Intl.NumberFormat(locale, {
    style: 'currency',
    currency,
  }).format(price);
};

export const formatDuration = (minutes: number) => {
  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;
  if (hours > 0) {
    return `${hours}h ${mins > 0 ? `${mins}m` : ''}`;
  }
  return `${mins}m`;
};


===== File: src\middleware.ts =====
import createMiddleware from 'next-intl/middleware';
import { routing } from './i18n/routing';

export default createMiddleware(routing);

export const config = {
  // Match only internationalized pathnames
  matcher: ['/', '/(id|en|fr|de|ar|russ)/:path*'],
};


# Directory: src\sections

===== File: src\sections\Benefits.tsx =====
import DashedBorderContainer from "@/components/DashedBorderContainer";
import Tag from "@/components/Tag";
import Image from "next/image";
import React from "react";
import CheckCircleIcon from "../../public/assets/icons/CheckCircleIcon";
import vectorBenefit from "../../public/assets/images/vector-benefit.svg";
import { useTranslations } from "next-intl";

export default function Benefits() {
  const t = useTranslations("Benefit");
  return (
    <section>
      <DashedBorderContainer>
        <div className="text-center max-w-[37rem] mx-auto">
          <div>
            <Tag>{t("tag")}</Tag>
          </div>
          <div>
            <h3 className="mt-8 text-h3 text-text-blackPrimary font-medium">
              {t("title")}
            </h3>
            <p className="text-body1 text-text-blackSecondary mt-3">
              {t("description")}
            </p>
          </div>
        </div>
        <div className="relative mt-14 grid grid-cols-1 lg:grid-cols-3 items-center max-w-4xl mx-auto gap-y-2">
          <div className="absolute -z-10">
            <Image src={vectorBenefit} alt="Vector benefit" />
          </div>
          <div className="flex items-center gap-2">
            <div className="size-10">
              <CheckCircleIcon />
            </div>
            <span className="text-h4 font-medium text-text-blackPrimary">
              {t("items.businessSolutions")}
            </span>
          </div>
          <div className="flex items-center gap-2">
            <div className="size-10">
              <CheckCircleIcon />
            </div>
            <span className="text-h4 font-medium text-text-blackPrimary">
              {t("items.brandingAndAdvertising")}
            </span>
          </div>
          <div className="flex items-center gap-2">
            <div className="size-10">
              <CheckCircleIcon />
            </div>
            <span className="text-h4 font-medium text-text-blackPrimary">
              {t("items.higherEducationPartnership")}
            </span>
          </div>
        </div>
      </DashedBorderContainer>
    </section>
  );
}


===== File: src\sections\Feature.tsx =====
"use client";
import Button from "@/components/Button";
import DashedBorderContainer from "@/components/DashedBorderContainer";
import Tag from "@/components/Tag";
import Image from "next/image";
import imageFeature1 from "../../public/assets/images/feature-image1.png";
import imageFeature2 from "../../public/assets/images/feature-image1.png";
import imageFeature3 from "../../public/assets/images/feature-image1.png";
import { useState } from "react";
import ArrowRightBlackIcon from "../../public/assets/icons/ArrowRightBlackIcon";
import ArrowLeftBlackIcon from "../../public/assets/icons/ArrowLeftBlackIcon";
import { ArrowRightLongIcon } from "../../public/assets/icons/ArrowRightLongIcon";

type FeatureProps = {
  tag: string;
  title: string;
  description: string;
  button: string;
};

const images = [
  { src: imageFeature1, alt: "Feature image 1" },
  { src: imageFeature2, alt: "Feature image 2" },
  { src: imageFeature3, alt: "Feature image 3" },
];

export default function Feature({
  tag,
  title,
  description,
  button,
}: FeatureProps) {
  // State untuk menyimpan indeks gambar yang sedang ditampilkan
  const [currentIndex, setCurrentIndex] = useState<number>(0);

  // Fungsi untuk navigasi ke gambar berikutnya
  const nextImage = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);
  };

  // Fungsi untuk navigasi ke gambar sebelumnya
  const prevImage = () => {
    setCurrentIndex(
      (prevIndex) => (prevIndex - 1 + images.length) % images.length
    );
  };

  return (
    <section>
      <DashedBorderContainer showTop={false}>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-y-10 items-center">
          <div className="flex flex-col">
            <Tag>{tag}</Tag>
            <h3 className="mt-8 text-text-blackPrimary text-h3 font-medium">
              {title}
            </h3>
            <p className="mt-3 text-text-blackSecondary text-body1">
              {description}
            </p>
            <div className="mt-6">
              <Button
                variant="tertiary"
                icon={<ArrowRightLongIcon />}
                iconPosition="right"
              >
                {button}
              </Button>
            </div>
          </div>
          <div className="flex justify-end">
            <div className="w-[530px] flex flex-col gap-4">
              <div className="w-full md:h-[348px] mx-auto bg-gradientPrimary rounded-3xl">
                <div className="flex items-center justify-center p-10">
                  <Image
                    src={images[currentIndex].src}
                    alt={images[currentIndex].alt}
                    className="w-full md:w-[382px] object-cover"
                  />
                </div>
              </div>
              <div className="flex items-center justify-between">
                <span>{`${currentIndex + 1}/${images.length}`}</span>
                <div className="flex items-center gap-3">
                  <Button
                    variant="secondary"
                    icon={<ArrowLeftBlackIcon />}
                    className="border border-tertiary-200"
                    onClick={prevImage}
                  />
                  <Button
                    variant="secondary"
                    icon={<ArrowRightBlackIcon />}
                    className="border border-tertiary-200"
                    onClick={nextImage}
                  />
                </div>
              </div>
            </div>
          </div>
        </div>
      </DashedBorderContainer>
    </section>
  );
}


===== File: src\sections\Footer.tsx =====
import DashedBorderContainer from '@/components/DashedBorderContainer';
import Image from 'next/image';
import vectorFooterImage from '../../public/assets/images/vector-footer.webp';
import logoPrimary from '../../public/assets/images/logo-primary.png';
import instagramIcon from '../../public/assets/images/instagram-icon.svg';
import facebookIcon from '../../public/assets/images/facebook-icon.svg';
import linkedinIcon from '../../public/assets/images/linkedin-icon.svg';
import { useTranslations } from 'next-intl';

const footerLinks = [
  {
    key: 'Kota',
    links: ['KotaYangBeroperasi'],
  },
  {
    key: 'Mitra',
    links: ['BermitraDenganKami'],
  },
  {
    key: 'Pengendara',
    links: [
      'PerjalananGrup',
      'BeamBooster',
      'PesanKendaraanBeam',
      'BerkendaraDenganKami',
    ],
  },
  {
    key: 'Perusahaan',
    links: [
      'UnduhAplikasi',
      'Karir',
      'KendaraanKami',
      'PrioritasKami',
      'Berita',
    ],
  },
];

export default function Footer() {
  const t = useTranslations('Footer');

  return (
    <footer className='relative pb-5'>
      <DashedBorderContainer showBottom={false}>
        <div className='max-w-5xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-10'>
          <div className='flex items-start gap-6 md:gap-10'>
            <div>
              <Image src={logoPrimary} alt='Beam logo' className='size-12' />
            </div>
            <div>
              <h2 className='w-full md:w-40 text-h4 md:text-h2 text-primary-500 font-semibold'>
                {t('BeamMobility')}
              </h2>
              <div className='mt-4 md:mt-8'>
                <p className='text-body4 text-text-blackSecondary'>
                  <span>{t('Copyright')}</span> <br />
                  <span>{t('CopyrightCompany')}</span>
                </p>
              </div>
              <div className='mt-5 flex items-center gap-3'>
                <div>
                  <Image
                    src={instagramIcon}
                    alt='Instagram icon'
                    className='size-4'
                  />
                </div>
                <div>
                  <Image
                    src={facebookIcon}
                    alt='Facebook icon'
                    className='size-4'
                  />
                </div>
                <div>
                  <Image
                    src={linkedinIcon}
                    alt='Linkedin icon'
                    className='size-4'
                  />
                </div>
              </div>
            </div>
          </div>

          <div className='flex lg:justify-end'>
            <div className='grid grid-cols-2 md:grid-cols-[repeat(4,_140px)] items-start gap-7 xl:gap-10'>
              {footerLinks.map((section, index) => (
                <div key={index}>
                  <h3 className='font-medium text-text-blackPrimary'>
                    {t(`Links.${section.key}`)}
                  </h3>
                  <div className='flex flex-col gap-1 mt-3'>
                    {section.links.map((link, linkIndex) => (
                      <a
                        key={linkIndex}
                        href='#'
                        className='block text-body4 text-tertiary-700'
                      >
                        {t(`Links.${link}`)}
                      </a>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </DashedBorderContainer>
      <div className='absolute bottom-0 left-0 -z-10'>
        <Image src={vectorFooterImage} alt='Vector image' draggable='false' />
      </div>
    </footer>
  );
}


===== File: src\sections\GarageLocation.tsx =====
import DashedBorderContainer from "@/components/DashedBorderContainer";
import Tag from "@/components/Tag";
import Image from "next/image";
import React from "react";
import globeImage from "../../public/assets/images/globe-image.png";
import vectorLocationGarage from "../../public/assets/images/vector-location-garage.svg";
import CountryList from "@/components/CountryList";
import { useTranslations } from "next-intl";

// const countriesData = [
//   {
//     country: "Turkey",
//     cities: ["Ankara", "Antalya", "Mugla"],
//   },
//   {
//     country: "Indonesia",
//     cities: [
//       "Bali",
//       "Bekasi",
//       "Bogor",
//       "Cikarang",
//       "Depok",
//       "Tanggerang",
//       "Tanggerang Selatan",
//     ],
//   },
//   {
//     country: "Malaysia",
//     cities: [
//       "Johor",
//       "Kedah",
//       "Kuala Lumpur",
//       "Kuala Trengganu",
//       "Kuantan",
//       "Selangor",
//       "Melaka",
//       "Negeri Sembilan",
//       "Perak",
//       "Pahang",
//       "Penang",
//       "Sabah",
//       "Sarawak",
//     ],
//   },
//   {
//     country: "Korea Selatan",
//     cities: [
//       "Ansan",
//       "Asan",
//       "Buc-Bupyeong",
//       "Busan",
//       "Changwon",
//       "Cheonan",
//       "Cheongju",
//       "Chuncheon",
//       "Daegu",
//       "Daejeon",
//       "Incheon",
//       "Seoul",
//     ],
//   },
//   {
//     country: "Jepang",
//     cities: ["Naha", "Osaka", "Minami Uonuma"],
//   },
//   {
//     country: "Thailand",
//     cities: [
//       "Bangkok",
//       "Chiangmai",
//       "Chonburi",
//       "Pathum Thani",
//       "Depok",
//       "Phuket",
//     ],
//   },
//   {
//     country: "Australia",
//     cities: [
//       "Adelaide",
//       "Albury",
//       "Bendigo",
//       "Broome",
//       "Burnburry",
//       "Cairns",
//       "Darwin",
//       "Esperance",
//       "Foster-Tuncurry",
//       "Geraldton",
//       "Harvey Bay",
//       "Hobart",
//       "Ipswich",
//       "Kogarah",
//       "Launceston",
//     ],
//   },
//   {
//     country: "Selandia Baru",
//     cities: [
//       "Napier",
//       "Porirua",
//       "Queenstown",
//       "Taupō",
//       "Tauranga",
//       "Whangārei",
//     ],
//   },
// ];

export default function GarageLocation() {
  const t = useTranslations("GarageLocation");

  const countriesData = [
    {
      country: t("countries.0.country"),
      cities: [
        t("countries.0.cities.0"),
        t("countries.0.cities.1"),
        t("countries.0.cities.2"),
      ],
    },
    {
      country: t("countries.1.country"),
      cities: [
        t("countries.1.cities.0"),
        t("countries.1.cities.1"),
        t("countries.1.cities.2"),
        t("countries.1.cities.3"),
        t("countries.1.cities.4"),
        t("countries.1.cities.5"),
        t("countries.1.cities.6"),
      ],
    },
    {
      country: t("countries.2.country"),
      cities: [
        t("countries.2.cities.0"),
        t("countries.2.cities.1"),
        t("countries.2.cities.2"),
        t("countries.2.cities.3"),
        t("countries.2.cities.4"),
        t("countries.2.cities.5"),
        t("countries.2.cities.6"),
        t("countries.2.cities.7"),
        t("countries.2.cities.8"),
        t("countries.2.cities.9"),
        t("countries.2.cities.10"),
        t("countries.2.cities.11"),
        t("countries.2.cities.12"),
      ],
    },
    {
      country: t("countries.3.country"),
      cities: [
        t("countries.3.cities.0"),
        t("countries.3.cities.1"),
        t("countries.3.cities.2"),
        t("countries.3.cities.3"),
        t("countries.3.cities.4"),
        t("countries.3.cities.5"),
        t("countries.3.cities.6"),
        t("countries.3.cities.7"),
        t("countries.3.cities.8"),
        t("countries.3.cities.9"),
        t("countries.3.cities.10"),
        t("countries.3.cities.11"),
      ],
    },
    {
      country: t("countries.4.country"),
      cities: [
        t("countries.4.cities.0"),
        t("countries.4.cities.1"),
        t("countries.4.cities.2"),
      ],
    },
    {
      country: t("countries.5.country"),
      cities: [
        t("countries.5.cities.0"),
        t("countries.5.cities.1"),
        t("countries.5.cities.2"),
        t("countries.5.cities.3"),
        t("countries.5.cities.4"),
        t("countries.5.cities.5"),
      ],
    },
    {
      country: t("countries.6.country"),
      cities: [
        t("countries.6.cities.0"),
        t("countries.6.cities.1"),
        t("countries.6.cities.2"),
        t("countries.6.cities.3"),
        t("countries.6.cities.4"),
        t("countries.6.cities.5"),
        t("countries.6.cities.6"),
        t("countries.6.cities.7"),
        t("countries.6.cities.8"),
        t("countries.6.cities.9"),
        t("countries.6.cities.10"),
        t("countries.6.cities.11"),
        t("countries.6.cities.12"),
      ],
    },
    {
      country: t("countries.7.country"),
      cities: [
        t("countries.7.cities.0"),
        t("countries.7.cities.1"),
        t("countries.7.cities.2"),
        t("countries.7.cities.3"),
        t("countries.7.cities.4"),
        t("countries.7.cities.5"),
      ],
    },
  ];

  return (
    <section>
      <div className="relative">
        <Image
          src={vectorLocationGarage}
          alt="Vector location garage"
          className="absolute -z-10 left-0 w-full top-52 md:top-72 xl:top-40 2xl:top-0"
        />

        <DashedBorderContainer>
          <div>
            <div className="flex justify-center">
              <Tag>{t("tag")}</Tag>
            </div>
            <div className="w-full flex justify-center mt-6">
              <Image
                src={globeImage}
                alt="Globe image location"
                className="w-full md:max-w-2xl"
              />
            </div>
          </div>
          <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-10">
            <CountryList countries={countriesData.slice(0, 4)} />
            <CountryList countries={countriesData.slice(4)} />
          </div>
        </DashedBorderContainer>
      </div>
    </section>
  );
}


===== File: src\sections\Help.tsx =====
import bulletIcon from "../../public/assets/images/bullet-icon.svg";
import Image from "next/image";

type HelpProps = {
  title: string;
  description: string;
  backgroundClass: string;
  children: React.ReactNode;
};

export default function Help({
  title,
  description,
  backgroundClass,
  children,
}: HelpProps) {
  return (
    <section>
      <div className="relative container max-w-xs md:max-w-[44rem] lg:max-w-6xl pt-10 border-x border-others-santasGray border-dashed">
        <div className="absolute z-10 -top-[5px] -left-1">
          <Image
            src={bulletIcon}
            alt="Bullet icon"
            className="size-2"
            draggable="false"
          />
        </div>

        <div className="absolute z-10 -top-[5px] -right-1">
          <Image
            src={bulletIcon}
            alt="Bullet icon"
            className="size-2"
            draggable="false"
          />
        </div>
      </div>
      <div
        className={`relative z-20 container lg:px-16 w-full bg-cover bg-center ${backgroundClass} xl:rounded-[2rem]`}
      >
        <div className="flex flex-col justify-center w-full md:max-w-[720px] h-[496px]">
          <h1 className="text-h2 md:text-h1 font-semibold text-text-whitePrimary">
            {title}
          </h1>
          <p className="text-body1 text-text-whiteSecondary mt-3">
            {description}
          </p>
          <div className="mt-8">{children}</div>
        </div>
      </div>
      <div className="relative container max-w-xs md:max-w-[44rem] lg:max-w-6xl pt-10 border-x border-others-santasGray border-dashed"></div>
    </section>
  );
}


===== File: src\sections\Hero.tsx =====
'use client';

import { useGender } from '@/context/GenderContext';

type HeroProps = {
  title: string;
  description: string;
  children: React.ReactNode;
  backgroundClass?: string;
};

export default function Hero({ title, description, children }: HeroProps) {
  const { gender } = useGender();

  // choose background image dynamically
  const backgroundMap: Record<typeof gender, string> = {
    male: 'bg-hero-male',
    female: 'bg-hero-female',
    other: 'bg-hero-default',
  };

  return (
    <section className='xl:px-7 xl:pt-7'>
      <div
        className={`container lg:px-16 w-full h-[42.5rem] bg-cover bg-center xl:rounded-[2rem] ${backgroundMap[gender]}`}
      >
        <div className='flex flex-col items-start justify-center h-full mx-auto'>
          <h1 className='text-text-whitePrimary text-6xl md:text-title font-semibold mt-32 w-full md:w-[519px]'>
            {title}
          </h1>
          <p className='mt-3 text-body1 text-text-whiteSecondary w-full md:w-[519px]'>
            {description}
          </p>
          <div className='flex items-end justify-between w-full'>
            {children}
          </div>
        </div>
      </div>
      <div className='container max-w-xs md:max-w-[44rem] lg:max-w-6xl pb-10 border-x border-others-santasGray border-dashed'></div>
    </section>
  );
}


===== File: src\sections\Mission.tsx =====
import Image from "next/image";
import DashedBorderContainer from "@/components/DashedBorderContainer";
import Tag from "@/components/Tag";
import vectorMisi from "../../public/assets/images/vector-misi.svg";
import misiImage1 from "../../public/assets/images/misi-image1.png";
import misiImage2 from "../../public/assets/images/misi-image2.png";
import { useTranslations } from "next-intl";

export default function Mission() {
  const t = useTranslations("Mission");
  return (
    <section>
      <DashedBorderContainer>
        {/* Vector Background */}
        <div className="absolute -z-10 top-0 left-0 hidden md:block">
          <Image
            src={vectorMisi}
            alt="Vector misi"
            className="w-full h-fit"
            draggable="false"
          />
        </div>

        {/* Tag */}
        <div className="flex justify-center">
          <Tag>{t("tag")}</Tag>
        </div>

        {/* Content */}
        <div className="max-w-4xl mx-auto relative">
          {/* Images */}
          <div className="absolute z-10 top-11 -left-6 hidden lg:block">
            <Image
              src={misiImage1}
              alt="Misi image 1"
              className="w-20 h-12 rounded-md"
            />
          </div>
          <div className="absolute z-10 top-4 -right-11 hidden lg:block">
            <Image
              src={misiImage2}
              alt="Misi image 2"
              className="w-20 h-12 rounded-md"
            />
          </div>

          {/* Text */}
          <div className="relative z-20">
            <h3 className="text-h4 md:text-h3 text-center text-text-blackPrimary font-medium mt-8">
              {t("text1")}{" "}
              <span className="text-primary-500">{t("text2")}</span>{" "}
              {t("text3")}
            </h3>
          </div>
        </div>
      </DashedBorderContainer>
    </section>
  );
}


===== File: src\sections\Navbar.tsx =====
'use client';

import Button from '@/components/Button';
import ChangeLanguage from '@/components/ChangeLanguage';
import { useTranslations } from 'next-intl';
import Image from 'next/image';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useEffect, useState } from 'react';
import CloseIcon from '../../public/assets/icons/CloseIcon';
import MenuIcon from '../../public/assets/icons/MenuIcon';
import { PhoneWhiteIcon } from '../../public/assets/icons/PhoneWhiteIcon';
import logoPrimary from '../../public/assets/images/logo-primary.png';

const navLinks = [
  { key: 'city', path: '/city' },
  { key: 'partner', path: '/partner' },
  { key: 'vehicle', path: '#vehicle' },
  { key: 'company', path: '#company' },
];

export default function Navbar() {
  const t = useTranslations('Navbar');
  const [isOpen, setIsOpen] = useState(false);
  const [isScrolled, setIsScrolled] = useState(false);
  const pathname = usePathname();

  // Extract the current locale from the path (e.g., /en, /id)
  const currentLocale = pathname.split('/')[1] || 'id'; // Default to "en"

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 30); // Change state if scroll > 50px
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  return (
    // <header className="absolute pt-4 md:pt-8 lg:pt-0 lg:top-14 left-0 w-full z-30 bg-transparent">
    <header
      className={`fixed left-0 w-full z-30 transition-colors duration-300 ${
        isScrolled
          ? 'py-4 top-0 md:py-6 lg:top-0 bg-background-whitebg/25 backdrop-blur shadow-md'
          : 'bg-transparent pt-4 md:pt-6 lg:pt-0 lg:mt-14'
      }`}
    >
      <div className='container mx-auto lg:px-16'>
        <div className='grid grid-cols-2 lg:grid-cols-3 items-center'>
          <Link href={`/${currentLocale}`}>
            <Image
              src={logoPrimary}
              alt='Logo image'
              className='w-[54px] h:auto'
            />
          </Link>
          <div className='lg:flex items-center justify-center hidden'>
            <nav className='flex px-5 py-3 gap-6 rounded-xl bg-others-stack/50 backdrop-blur'>
              {navLinks.map(link => (
                <Link
                  key={link.key}
                  href={`/${currentLocale}${link.path}`}
                  className='px-2 text-secondary-50 font-medium text-sm'
                >
                  {t(link.key)}
                </Link>
              ))}
            </nav>
          </div>
          <div className='flex justify-end gap-3'>
            <div className='md:flex gap-3 hidden'>
              <ChangeLanguage />
              <Button
                variant='primary'
                icon={<PhoneWhiteIcon />}
                iconPosition='right'
              >
                {t('contact')}
              </Button>
            </div>
            <button
              className='flex lg:hidden items-center justify-center p-2.5 bg-text-whitePrimary rounded-lg'
              onClick={() => setIsOpen(prev => !prev)}
            >
              <MenuIcon />
            </button>
          </div>
        </div>

        {/* Mobile Menu */}
        <div
          className={`lg:hidden fixed top-0 left-0 w-full bg-background-whitebg h-dvh shadow-lg z-30 transition-transform duration-300 ease-in-out ${
            isOpen ? 'transform translate-x-0' : 'transform -translate-x-full'
          }`}
        >
          <div className='flex items-center justify-between p-4 md:p-8'>
            <Link href={`/${currentLocale}`}>
              <Image
                src={logoPrimary}
                alt='Logo image'
                className='w-[54px] h:auto'
              />
            </Link>
            <button
              className='flex items-center justify-center p-2.5 bg-text-whitePrimary rounded-lg border border-text-blackSecondary'
              onClick={() => setIsOpen(prev => !prev)}
            >
              <CloseIcon />
            </button>
          </div>
          <nav className='flex flex-col items-start gap-4 p-4 md:p-8 mt-10'>
            {navLinks.map(link => (
              <Link
                key={link.key}
                href={`/${currentLocale}${link.path}`}
                className='text-text-blackSecondary font-medium text-h3'
              >
                {t(link.key)}
              </Link>
            ))}
          </nav>
          <div className='border-t border-text-blackTertiary mx-4 md:mx-8 my-5'></div>
          <div className='flex flex-col md:flex-row gap-3 p-4 md:p-8 border-gray-200'>
            <ChangeLanguage />
            <Button
              variant='primary'
              icon={<PhoneWhiteIcon />}
              iconPosition='right'
            >
              {t('contact')}
            </Button>
          </div>
        </div>
      </div>
    </header>
  );
}


===== File: src\sections\News.tsx =====
import Button from "@/components/Button";
import DashedBorderContainer from "@/components/DashedBorderContainer";
import Tag from "@/components/Tag";
import newsImage1 from "../../public/assets/images/news-image1.png";
import newsImage2 from "../../public/assets/images/news-image2.png";
import newsImage3 from "../../public/assets/images/news-image3.png";
import NewsCard from "@/components/NewsCard";
import { ArrowRightLongIcon } from "../../public/assets/icons/ArrowRightLongIcon";
import { useTranslations } from "next-intl";

export default function News() {
  const t = useTranslations("News");

  const newsData = [
    {
      imageSrc: newsImage1,
      imageAlt: "News image 1",
      category: t("news.0.category"),
      description: t("news.0.description"),
      date: t("news.0.date"),
    },
    {
      imageSrc: newsImage2,
      imageAlt: "News image 2",
      category: t("news.1.category"),
      description: t("news.1.description"),
      date: t("news.1.date"),
    },
    {
      imageSrc: newsImage3,
      imageAlt: "News image 3",
      category: t("news.2.category"),
      description: t("news.2.description"),
      date: t("news.2.date"),
    },
  ];

  return (
    <section>
      <DashedBorderContainer>
        <div>
          <div className="flex flex-col items-center max-w-2xl mx-auto">
            <div>
              <Tag>{t("tag")}</Tag>
            </div>
            <div className="mt-8 flex flex-col gap-3 items-center">
              <h3 className="text-h3 font-medium text-text-blackPrimary">
                {t("title")}
              </h3>
              <p className="text-body1 text-text-blackSecondary text-center">
                {t("description")}
              </p>
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 items-start gap-7 mt-10">
            {newsData.map((news, index) => (
              <NewsCard
                key={index}
                imageSrc={news.imageSrc}
                imageAlt={news.imageAlt}
                category={news.category}
                description={news.description}
                date={news.date}
              />
            ))}
          </div>
          <div className="mt-11 flex justify-center">
            <Button
              variant="tertiary"
              icon={<ArrowRightLongIcon />}
              iconPosition="right"
            >
              {t("button")}
            </Button>
          </div>
        </div>
      </DashedBorderContainer>
    </section>
  );
}


===== File: src\sections\Partnership.tsx =====
"use client";

import Button from "@/components/Button";
import DashedBorderContainer from "@/components/DashedBorderContainer";
import Tag from "@/components/Tag";
import PartnershipCard from "@/components/PartnershipCard";
import { useTranslations } from "next-intl";
import { useRef } from "react";
import ArrowLeftBlackIcon from "../../public/assets/icons/ArrowLeftBlackIcon";
import ArrowRightBlackIcon from "../../public/assets/icons/ArrowRightBlackIcon";
import ArrowRightWhiteIcon from "../../public/assets/icons/ArrowRightWhiteIcon";
import buildingIcon from "../../public/assets/images/building-office-icon.svg";
import userGroupIcon from "../../public/assets/images/user-grup-icon.svg";
import shieldCheckIcon from "../../public/assets/images/shield-check.svg";
import partnershipImage1 from "../../public/assets/images/partnership-image1.png";
import partnershipImage2 from "../../public/assets/images/partnership-image2.png";
import partnershipImage3 from "../../public/assets/images/partnership-image3.png";

export default function Partnership() {
  const t = useTranslations("Partnership");

  const scrollContainerRef = useRef<HTMLDivElement>(null);
  const scrollAmount = 300; // Jumlah scroll saat tombol ditekan

  const handlePrev = () => {
    if (scrollContainerRef.current) {
      scrollContainerRef.current.scrollLeft -= scrollAmount;
    }
  };

  const handleNext = () => {
    if (scrollContainerRef.current) {
      scrollContainerRef.current.scrollLeft += scrollAmount;
    }
  };

  const partnershipData = [
    {
      title: t("partnerships.0.title"),
      subtitle: t("partnerships.0.subtitle"),
      imageSrc: partnershipImage1,
      imageAlt: t("partnerships.0.imageAlt"),
      iconSrc: buildingIcon,
      buttonIcon: <ArrowRightWhiteIcon />,
    },
    {
      title: t("partnerships.1.title"),
      subtitle: t("partnerships.1.subtitle"),
      imageSrc: partnershipImage2,
      imageAlt: t("partnerships.1.imageAlt"),
      iconSrc: userGroupIcon,
      buttonIcon: <ArrowRightWhiteIcon />,
    },
    {
      title: t("partnerships.2.title"),
      subtitle: t("partnerships.2.subtitle"),
      imageSrc: partnershipImage3,
      imageAlt: t("partnerships.2.imageAlt"),
      iconSrc: shieldCheckIcon,
      buttonIcon: <ArrowRightWhiteIcon />,
    },
  ];

  return (
    <section>
      <DashedBorderContainer showTop={false} className="overflow-hidden">
        <div className="flex flex-col">
          <div className="md:max-w-lg">
            <div>
              <Tag>{t("tag")}</Tag>
            </div>
            <div className="mt-8">
              <h3 className="text-h3 font-medium text-text-blackPrimary">
                {t("title")}
              </h3>
              <p className="mt-3 text-body1 text-text-blackSecondary">
                {t("description")}
              </p>
            </div>
          </div>
          <div className="mt-9">
            <div className="md:flex items-center justify-between hidden">
              <div></div>
              <div className="flex items-center gap-4 md:mr-9">
                <Button
                  variant="secondary"
                  icon={<ArrowLeftBlackIcon />}
                  onClick={handlePrev}
                  aria-label={t("buttons.prev")}
                />
                <Button
                  variant="secondary"
                  icon={<ArrowRightBlackIcon />}
                  onClick={handleNext}
                  aria-label={t("buttons.next")}
                />
              </div>
            </div>

            <div
              ref={scrollContainerRef}
              className="mt-6 flex items-start gap-7 overflow-x-scroll scrollbar-hide smooth-scroll"
            >
              {partnershipData.map((data, index) => (
                <PartnershipCard
                  key={index}
                  title={data.title}
                  subtitle={data.subtitle}
                  imageSrc={data.imageSrc}
                  imageAlt={data.imageAlt}
                  iconSrc={data.iconSrc}
                  buttonIcon={data.buttonIcon}
                />
              ))}
            </div>
          </div>
        </div>
      </DashedBorderContainer>
    </section>
  );
}


===== File: src\sections\Priority.tsx =====
import Button from "@/components/Button";
import DashedBorderContainer from "@/components/DashedBorderContainer";
import Tag from "@/components/Tag";
import Image from "next/image";
import { useTranslations } from "next-intl";
import imageProgram1 from "../../public/assets/images/priority-image1.png";
import iconProgramBeam from "../../public/assets/images/program-beam-icon.svg";
import { ArrowRightLongIcon } from "../../public/assets/icons/ArrowRightLongIcon";

export default function Priority() {
  const t = useTranslations("Priority");

  return (
    <section>
      <DashedBorderContainer showTop={false}>
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-y-10 items-center">
          <div className="flex flex-col">
            <Tag>{t("tag")}</Tag>
            <h3 className="mt-8 text-text-blackPrimary text-h3 font-medium">
              {t("title")}
            </h3>
            <p className="mt-3 text-text-blackSecondary text-body1">
              {t("description")}
            </p>
            <div className="mt-6">
              <Button
                variant="tertiary"
                icon={<ArrowRightLongIcon />}
                iconPosition="right"
              >
                {t("button")}
              </Button>
            </div>
          </div>
          <div className="flex justify-end">
            <div className="flex flex-col w-full md:w-[530px] overflow-clip">
              <div className="pt-7 px-7 bg-gradientPrimary rounded-t-3xl">
                <div className="relative">
                  <Image
                    src={imageProgram1}
                    alt={t("title")}
                    className="rounded-t-2xl"
                  />
                  <div className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2">
                    <Image src={iconProgramBeam} alt="Icon program beam" />
                  </div>
                </div>
              </div>
              <div className="bg-secondary-200 px-7 md:px-10 rounded-b-3xl overflow-x-scroll md:overflow-visible">
                <div className="flex items-center justify-between py-2.5 text-secondary-700">
                  <a
                    href="#"
                    className="px-4 py-1.5 rounded-lg bg-secondary-50 text-text-blackPrimary text-nav"
                  >
                    {t("tabs.sustainability")}
                  </a>
                  <a
                    href="#"
                    className="px-4 py-1.5 rounded-lg text-nav font-medium"
                  >
                    {t("tabs.safety")}
                  </a>
                  <a
                    href="#"
                    className="px-4 py-1.5 rounded-lg text-nav font-medium"
                  >
                    {t("tabs.community")}
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </DashedBorderContainer>
    </section>
  );
}


===== File: src\sections\QrCode.tsx =====
import DashedBorderContainer from "@/components/DashedBorderContainer";
import Image from "next/image";
import React from "react";
import qrCodeAndroid from "../../public/assets/images/qr-code-android.svg";
import qrCodeIos from "../../public/assets/images/qr-code-ios.svg";
import AndroidIcon from "../../public/assets/icons/AndroidIcon";
import IosIcon from "../../public/assets/icons/IosIcon";
import { useTranslations } from "next-intl";

export default function QrCode() {
  const t = useTranslations("QrCode");
  return (
    <section>
      <DashedBorderContainer showBottom={false}>
        <div>
          <h4 className="text-h4 font-medium text-text-blackSecondary max-w-lg mb-6">
            {t("title")}
          </h4>
        </div>
        <div className="container max-w-xs md:max-w-[44rem] lg:max-w-6xl border-y border-others-santasGray border-dashed"></div>
        <div className="relative grid grid-cols-1 lg:grid-cols-2 gap-3 items-center mt-14">
          <div className="p-3 flex flex-col md:flex-row md:items-center gap-5">
            <Image src={qrCodeAndroid} alt="Qr code android" className="w-36" />

            <div className="flex flex-col">
              <div className="flex items-center gap-3">
                <div className="p-2 flex items-center justify-center bg-gradientTertiary rounded-lg size-11">
                  <AndroidIcon />
                </div>
                <span className="text-h5 text-text-blackPrimary font-medium">
                  {t("android.title")}
                </span>
              </div>
              <p className="mt-3 text-body2 text-text-blackSecondary">
                {t("android.description")}
              </p>
            </div>
          </div>

          <div className="absolute h-72 mt-2 border-x border-others-santasGray border-dashed left-1/2 -translate-x-1/2 hidden lg:block"></div>

          <div className="p-3 flex flex-col md:flex-row md:items-center gap-5">
            <Image src={qrCodeIos} alt="Qr code iOS" className="w-36" />

            <div className="flex flex-col">
              <div className="flex items-center gap-3">
                <div className="p-2 flex items-center justify-center bg-gradientTertiary rounded-lg size-11">
                  <IosIcon />
                </div>
                <span className="text-h5 text-text-blackPrimary font-medium">
                  {t("ios.title")}
                </span>
              </div>
              <p className="mt-3 text-body2 text-text-blackSecondary">
                {t("ios.description")}
              </p>
            </div>
          </div>
        </div>
      </DashedBorderContainer>
    </section>
  );
}


===== File: src\sections\Testimonial.tsx =====
"use client";
import ArrowLeftBlackIcon from "../../public/assets/icons/ArrowLeftBlackIcon";
import ArrowRightBlackIcon from "../../public/assets/icons/ArrowRightBlackIcon";
import Button from "@/components/Button";
import DashedBorderContainer from "@/components/DashedBorderContainer";
import Tag from "@/components/Tag";
import Image from "next/image";
import React, { useEffect, useState } from "react";
import userTertimonial1 from "../../public/assets/images/user-testimonial1.svg";
import userTertimonial2 from "../../public/assets/images/user-testimonial2.svg";
import userTertimonial3 from "../../public/assets/images/user-testimonial3.svg";
import partnerLogo1 from "../../public/assets/images/tertimonial-logo1.svg";
import partnerLogo2 from "../../public/assets/images/tertimonial-logo2.svg";
import partnerLogo3 from "../../public/assets/images/tertimonial-logo3.svg";
import { useTranslations } from "next-intl";

const testimonial = [
  {
    quote:
      "#BeamBooster adalah inisiatif cerdas yang menggunakan skuter listrik Beam untuk mendatangkan lebih banyak orang di pintu kami. Kami sangat senang bisa terlibat.",
    author: "Helen Rutherford",
    position: "Komisaris",
    userTestimonialImage: userTertimonial1,
    partnerLogo: partnerLogo1,
  },
  {
    quote:
      "Program ini membantu meningkatkan pengunjung harian di toko kami. Skuter Beam sangat menarik perhatian, dan kami melihat dampak positifnya.",
    author: "Jane Smith",
    position: "Manajer Toko ABC",
    userTestimonialImage: userTertimonial2,
    partnerLogo: partnerLogo2,
  },
  {
    quote:
      "Kami sangat terkesan dengan dampak langsung dari #BeamBooster. Ini inovasi brilian yang mendukung bisnis lokal seperti kami.",
    author: "Michael Brown",
    position: "CEO Restoran DEF",
    userTestimonialImage: userTertimonial3,
    partnerLogo: partnerLogo3,
  },
];

export default function Testimonial() {
  const t = useTranslations("Testimonial");
  // State untuk menyimpan indeks gambar yang sedang ditampilkan
  const [currentIndex, setCurrentIndex] = useState<number>(0);

  // Fungsi untuk navigasi ke gambar berikutnya
  const nextTestimonial = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % testimonial.length);
  };

  // Fungsi untuk navigasi ke gambar sebelumnya
  const prevTestimonial = () => {
    setCurrentIndex(
      (prevIndex) => (prevIndex - 1 + testimonial.length) % testimonial.length
    );
  };

  // Autoplay: Jalankan interval untuk secara otomatis memperbarui testimonial
  useEffect(() => {
    const interval = setInterval(nextTestimonial, 5000); // Beralih setiap 5 detik
    return () => clearInterval(interval); // Bersihkan interval saat komponen di-unmount
  }, []);

  return (
    <section>
      <DashedBorderContainer showTop={false}>
        <div>
          <div>
            <Tag>{t("tag")}</Tag>
          </div>
          <div className="mt-8 grid grid-cols-1 lg:grid-cols-2 items-center gap-y-6">
            <div className="w-full lg:w-[46rem]">
              <span className="text-title font-semibold text-primary-400">
                “
              </span>
              <p className="text-h4 text-text-blackPrimary font-medium -mt-6">
                {t(`quotes.${currentIndex}.quote`)}
              </p>
            </div>

            <div className="flex lg:justify-end">
              <div className="flex flex-col">
                <div>
                  <Image
                    src={testimonial[currentIndex].partnerLogo}
                    alt="Partner logo"
                  />
                </div>
                <div className="flex items-center gap-3 mt-6">
                  <div>
                    <Image
                      src={testimonial[currentIndex].userTestimonialImage}
                      alt="User testimonial image"
                      className="size-11"
                    />
                  </div>
                  <div className="flex flex-col">
                    <h4 className="text-body3 text-text-blackPrimary ">
                      {t(`quotes.${currentIndex}.author`)}
                    </h4>
                    <span className="text-body4 text-text-blackSecondary">
                      {t(`quotes.${currentIndex}.position`)}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="mt-4 flex items-center justify-between lg:justify-start gap-7">
            <span>{`${currentIndex + 1}/${testimonial.length}`}</span>
            <div className="flex items-center gap-3">
              <Button
                variant="secondary"
                icon={<ArrowLeftBlackIcon />}
                className="border border-tertiary-200"
                onClick={prevTestimonial}
              />
              <Button
                variant="secondary"
                icon={<ArrowRightBlackIcon />}
                className="border border-tertiary-200"
                onClick={nextTestimonial}
              />
            </div>
          </div>
        </div>
      </DashedBorderContainer>
    </section>
  );
}


===== File: src\sections\Vehicle.tsx =====
import DashedBorderContainer from "@/components/DashedBorderContainer";
import Tag from "@/components/Tag";
import VehicleCard from "@/components/VehicleCard";
import vehicleImage1 from "../../public/assets/images/vehicle-image1.png";
import vehicleImage2 from "../../public/assets/images/vehicle-image2.png";
import { useTranslations } from "next-intl";

const vehicles = [
  {
    id: 1,
    imageSrc: vehicleImage1,
    title: "The Beam Saturn S",
  },
  {
    id: 2,
    imageSrc: vehicleImage2,
    title: "Beam Rover",
  },
];

export default function Vehicle() {
  const t = useTranslations("Vehicle");

  return (
    <section>
      <DashedBorderContainer showTop={false}>
        <div>
          <div className="flex flex-col items-center max-w-2xl mx-auto">
            <div>
              <Tag>{t("tag")}</Tag>
            </div>
            <div className="mt-8 flex flex-col gap-3 items-center">
              <h3 className="text-h3 font-medium text-text-blackPrimary">
                {t("title")}
              </h3>
              <p className="text-body1 text-text-blackSecondary text-center">
                {t("description")}
              </p>
            </div>
          </div>

          <div className="mt-10 grid grid-cols-1 md:grid-cols-2 gap-7">
            {vehicles.map((vehicle) => (
              <VehicleCard
                key={vehicle.id}
                imageSrc={vehicle.imageSrc}
                title={vehicle.title}
                // onButtonClick={() => handleButtonClick(vehicle.title)}
              />
            ))}
          </div>
        </div>
      </DashedBorderContainer>
    </section>
  );
}


===== File: src\sections\VehicleSafety.tsx =====
import DashedBorderContainer from "@/components/DashedBorderContainer";
import VehicleSafetyCard from "@/components/VehicleSafetyCard";
import React from "react";
import vehicleSafetyImage1 from "../../public/assets/images/vehicle-safety-card-image1.png";
import vehicleSafetyImage2 from "../../public/assets/images/vehicle-safety-card-image2.png";
import vehicleSafetyImage3 from "../../public/assets/images/vehicle-safety-card-image3.png";
import vehicleSafetyImage4 from "../../public/assets/images/vehicle-safety-card-image4.png";
import vehicleSafetyImage5 from "../../public/assets/images/vehicle-safety-card-image5.png";
import { useTranslations } from "next-intl";

export default function VehicleSafety() {
  const t = useTranslations("VehicleSafety");
  console.log(t);
  return (
    <section>
      <DashedBorderContainer showTop={false}>
        <div className="flex flex-col items-center gap-24">
          <VehicleSafetyCard
            tag={t("tag")}
            title={t("title1")}
            description={t("desc1")}
            imageSrc={vehicleSafetyImage1}
            imageAlt="Vehicle safety image 1"
            textPosition="left"
            imagePosition="right"
          />
          <VehicleSafetyCard
            tag={t("tag")}
            title={t("title2")}
            description={t("desc2")}
            imageSrc={vehicleSafetyImage2}
            imageAlt="Vehicle safety image 2"
            textPosition="right"
            imagePosition="left"
          />
          <VehicleSafetyCard
            tag={t("tag")}
            title={t("title3")}
            description={t("desc3")}
            imageSrc={vehicleSafetyImage3}
            imageAlt="Vehicle safety image 3"
            textPosition="left"
            imagePosition="right"
          />
          <VehicleSafetyCard
            tag={t("tag")}
            title={t("title4")}
            description={t("desc4")}
            imageSrc={vehicleSafetyImage4}
            imageAlt="Vehicle safety image 4"
            textPosition="right"
            imagePosition="left"
          />
          <VehicleSafetyCard
            tag={t("tag")}
            title={t("title5")}
            description={t("desc5")}
            imageSrc={vehicleSafetyImage5}
            imageAlt="Vehicle safety image 5"
            textPosition="left"
            imagePosition="right"
          />
        </div>
      </DashedBorderContainer>
    </section>
  );
}


===== File: src\sections\Videos.tsx =====
// import DashedBorderContainer from "@/components/DashedBorderContainer";
// import Image from "next/image";
// import thumbnailVideo from "../../public/assets/images/video-image.png";
// import Button from "@/components/Button";

// const PlayICon = () => (
//   <svg
//     width="24"
//     height="24"
//     viewBox="0 0 24 24"
//     fill="none"
//     xmlns="http://www.w3.org/2000/svg"
//   >
//     <path
//       d="M5.25 5.65308C5.25 4.79708 6.167 4.25508 6.917 4.66708L18.457 11.0141C18.6336 11.1111 18.781 11.2538 18.8836 11.4273C18.9862 11.6007 19.0403 11.7986 19.0403 12.0001C19.0403 12.2016 18.9862 12.3994 18.8836 12.5729C18.781 12.7463 18.6336 12.889 18.457 12.9861L6.917 19.3331C6.74569 19.4273 6.55278 19.4752 6.35731 19.4721C6.16184 19.469 5.97054 19.4151 5.80227 19.3155C5.634 19.216 5.49457 19.0744 5.39773 18.9045C5.30089 18.7347 5.24997 18.5426 5.25 18.3471V5.65308Z"
//       stroke="#0F0F0F"
//       strokeWidth="1.6"
//       strokeLinecap="round"
//       strokeLinejoin="round"
//     />
//   </svg>
// );

// export default function Videos() {
//   return (
//     <section>
//       <DashedBorderContainer showTop={false}>
//         <div className="relative">
//           <Image
//             src={thumbnailVideo}
//             alt="Thumbnail video"
//             className="w-full md:h-[536px] object-cover xl:rounded-[32px]"
//           />
//           <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
//             <Button
//               variant="secondary"
//               icon={<PlayICon />}
//               className="px-[10px]"
//             ></Button>
//           </div>
//         </div>
//       </DashedBorderContainer>
//     </section>
//   );
// }


# Directory: src\styles

# Directory: src\types

===== File: src\types\global.d.ts =====
declare module '*.css';

